<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sa-Token（三）权限认证构成与鉴权方法</title>
      <link href="/2025/02/12/Sa-Token%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E6%9E%84%E6%88%90%E4%B8%8E%E9%89%B4%E6%9D%83%E6%96%B9%E6%B3%95/"/>
      <url>/2025/02/12/Sa-Token%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E6%9E%84%E6%88%90%E4%B8%8E%E9%89%B4%E6%9D%83%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>目录</strong><br>一、<a href="https://blog.amane64.site/2025/02/11/Sa-Token%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%85%8D%E7%BD%AE/">简介与配置</a><br>二、<a href="https://blog.amane64.site/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/">实现登录注销操作</a><br>三、权限认证构成与鉴权方法  &lt;— 你在这里 ( •̀ ω •́ )y<br>四、<a href="">RBAC 结构实现</a></p></blockquote><h2 id="Sa-Token（三）权限认证构成与鉴权方法"><a href="#Sa-Token（三）权限认证构成与鉴权方法" class="headerlink" title="Sa-Token（三）权限认证构成与鉴权方法"></a>Sa-Token（三）权限认证构成与鉴权方法</h2><blockquote><p>[!NOTE]</p><p>博主前言：Spring Security 的学习真是惊掉我下巴，就一个鉴权功能，搞那么多复杂概念，又是过滤器链又是注入的，花了我一个星期左右，实际上还很不好用（未知错误给前端返回 401 是真绷不住）。Sa-Token 作为国产鉴权，性能更强的同时简化开发的程度相比 Spring Security 起码有十倍不止。最近我还注意到对标 Spring 生态的 Solon 框架，也是国产，性能提升3倍多，内存占用减少 50%+，打包还更小，真不知道这些工作为什么老外都做的这么复杂。</p></blockquote><p>有了登录，接下来就要对接口配置拦截，进一步地还能设置权限。</p><p>在这之前，我们先来了解一下 Sa-Token 权限认证的构造。</p><hr><h3 id="一、权限类型简介"><a href="#一、权限类型简介" class="headerlink" title="一、权限类型简介"></a>一、权限类型简介</h3><p>Sa-Token 的权限是经典的<code>RBAC</code>结构，分为两种类型：</p><ul><li>权限码：具体的某种权限，如<strong>新增</strong>，<strong>修改</strong>等</li><li>角色：用户的抽象概念，或者说是权限码的集合，如<strong>管理员拥有所有权限</strong>，<strong>普通用户只拥有浏览和提交权限等</strong></li></ul><blockquote><p>[!IMPORTANT]</p><p>实际上，Sa-Token 中的角色与权限码并没有强关联，为用户注入权限时，需要手动将二者均注入一遍</p></blockquote><blockquote><p>[!TIP]</p><p>关于什么是<code>RBAC</code>结构，参考这篇文章：<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/">Spring Security（六）RBAC 结构实现</a></p></blockquote><p>对于<strong>权限码</strong>：为程序预先制定，可<strong>定义为常量</strong>调用。</p><p>对于<strong>角色</strong>：可由指定权限的用户添加&#x2F;修改，则需<strong>定义数据表存储</strong>。</p><hr><h3 id="二、三种鉴权方法"><a href="#二、三种鉴权方法" class="headerlink" title="二、三种鉴权方法"></a>二、三种鉴权方法</h3><p>先了解鉴权方法是如何调用的，之后再实际上手。</p><blockquote><p>[!IMPORTANT]</p><p>一般情况下，验证不通过时会抛出<code>NotPermissionException</code>（权限码）和<code>NotRoleException</code>（角色）这两种异常。</p></blockquote><ol><li>静态方法鉴权：</li></ol><p>调用<code>StpUtil</code>的静态方法即可实现鉴权，可以调用鉴权失败时返回<code>false</code>而不抛出异常的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 权限码 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取：当前账号所拥有的权限集合</span></span><br><span class="line">StpUtil.getPermissionList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断：当前账号是否含有指定权限, 返回 true 或 false</span></span><br><span class="line">StpUtil.hasPermission(<span class="string">&quot;user.add&quot;</span>);        </span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验：当前账号是否含有指定权限, 如果验证未通过，则抛出异常: NotPermissionException </span></span><br><span class="line">StpUtil.checkPermission(<span class="string">&quot;user.add&quot;</span>);        </span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验：当前账号是否含有指定权限 [指定多个，必须全部验证通过]</span></span><br><span class="line">StpUtil.checkPermissionAnd(<span class="string">&quot;user.add&quot;</span>, <span class="string">&quot;user.delete&quot;</span>, <span class="string">&quot;user.get&quot;</span>);        </span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验：当前账号是否含有指定权限 [指定多个，只要其一验证通过即可]</span></span><br><span class="line">StpUtil.checkPermissionOr(<span class="string">&quot;user.add&quot;</span>, <span class="string">&quot;user.delete&quot;</span>, <span class="string">&quot;user.get&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 角色 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取：当前账号所拥有的角色集合</span></span><br><span class="line">StpUtil.getRoleList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断：当前账号是否拥有指定角色, 返回 true 或 false</span></span><br><span class="line">StpUtil.hasRole(<span class="string">&quot;super-admin&quot;</span>);        </span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验：当前账号是否含有指定角色标识, 如果验证未通过，则抛出异常: NotRoleException</span></span><br><span class="line">StpUtil.checkRole(<span class="string">&quot;super-admin&quot;</span>);        </span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验：当前账号是否含有指定角色标识 [指定多个，必须全部验证通过]</span></span><br><span class="line">StpUtil.checkRoleAnd(<span class="string">&quot;super-admin&quot;</span>, <span class="string">&quot;shop-admin&quot;</span>);        </span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验：当前账号是否含有指定角色标识 [指定多个，只要其一验证通过即可] </span></span><br><span class="line">StpUtil.checkRoleOr(<span class="string">&quot;super-admin&quot;</span>, <span class="string">&quot;shop-admin&quot;</span>);        </span><br></pre></td></tr></table></figure><ol start="2"><li>注解鉴权：</li></ol><p>我们可以使用注解在方法上标注，没有权限的用户调用该方法会抛出对应的权限异常。</p><blockquote><p>[!WARNING]</p><p>不建议在<code>Controller</code>层以外的方法使用注解鉴权，虽然 Sa-Token 提供了额外包实现其他位置的注解鉴权，但这样做会徒增设计复杂度，后续难以维护。</p></blockquote><p>首先，在<code>Web</code>层配置类注册 Sa-Token 拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册 web 层相关组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 Sa-Token 拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;注册 Sa-Token 拦截器&quot;</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">SaInterceptor</span>()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以使用注解鉴权了，使用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录校验：只有登录之后才能进入该方法 </span></span><br><span class="line"><span class="meta">@SaCheckLogin</span>                        </span><br><span class="line"><span class="meta">@RequestMapping(&quot;info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;查询用户信息&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色校验：必须具有指定角色才能进入该方法 </span></span><br><span class="line"><span class="meta">@SaCheckRole(&quot;super-admin&quot;)</span>        </span><br><span class="line"><span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户增加&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 权限校验：必须具有指定权限才能进入该方法 </span></span><br><span class="line"><span class="meta">@SaCheckPermission(&quot;user-add&quot;)</span>        </span><br><span class="line"><span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户增加&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二级认证校验：必须二级认证之后才能进入该方法 </span></span><br><span class="line"><span class="meta">@SaCheckSafe()</span>        </span><br><span class="line"><span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户增加&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Http Basic 校验：只有通过 Http Basic 认证后才能进入该方法 </span></span><br><span class="line"><span class="meta">@SaCheckHttpBasic(account = &quot;sa:123456&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户增加&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Http Digest 校验：只有通过 Http Digest 认证后才能进入该方法 </span></span><br><span class="line"><span class="meta">@SaCheckHttpDigest(value = &quot;sa:123456&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户增加&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验当前账号是否被封禁 comment 服务，如果已被封禁会抛出异常，无法进入方法 </span></span><br><span class="line"><span class="meta">@SaCheckDisable(&quot;comment&quot;)</span>                </span><br><span class="line"><span class="meta">@RequestMapping(&quot;send&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;查询用户信息&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @SaCheckRole与@SaCheckPermission注解可设置校验模式</span></span><br><span class="line"><span class="comment">// mode有两种取值：</span></span><br><span class="line"><span class="comment">// SaMode.AND，标注一组权限，会话必须全部具有才可通过校验。</span></span><br><span class="line"><span class="comment">// SaMode.OR，标注一组权限，会话只要具有其一即可通过校验。</span></span><br><span class="line"><span class="comment">// 注解式鉴权：只要具有其中一个权限即可通过校验 </span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;atJurOr&quot;)</span></span><br><span class="line"><span class="meta">@SaCheckPermission(value = &#123;&quot;user-add&quot;, &quot;user-all&quot;, &quot;user-delete&quot;&#125;, mode = SaMode.OR)</span>        </span><br><span class="line"><span class="keyword">public</span> SaResult <span class="title function_">atJurOr</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> SaResult.data(<span class="string">&quot;用户信息&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色权限双重 “or校验”：具备指定权限或者指定角色即可通过校验</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;userAdd&quot;)</span></span><br><span class="line"><span class="comment">// 需要角色 admin</span></span><br><span class="line"><span class="meta">@SaCheckPermission(value = &quot;user.add&quot;, orRole = &quot;admin&quot;)</span></span><br><span class="line"><span class="comment">// 需要三个角色其一即可</span></span><br><span class="line"><span class="meta">@SaCheckPermission(value = &quot;user.add&quot;, orRole = &#123;&quot;admin&quot;, &quot;manager&quot;, &quot;staff&quot;&#125;)</span>  </span><br><span class="line"><span class="comment">// 需要同时具有三个角色</span></span><br><span class="line"><span class="meta">@SaCheckPermission(value = &quot;user.add&quot;, orRole = &#123;&quot;admin, manager, staff&quot;&#125;)</span>         </span><br><span class="line"><span class="keyword">public</span> SaResult <span class="title function_">userAdd</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> SaResult.data(<span class="string">&quot;用户信息&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 @SaIgnore 可表示一个接口忽略认证</span></span><br><span class="line"><span class="comment">// @SaIgnore 同样可以忽略掉 Sa-Token 拦截器中的路由鉴权</span></span><br><span class="line"><span class="meta">@SaIgnore</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;getList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SaResult <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="keyword">return</span> SaResult.ok(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 `@SaCheckOr` 中可以指定多个注解，只要当前会话满足其中一个注解即可通过验证，进入方法。</span></span><br><span class="line"><span class="meta">@SaCheckOr(</span></span><br><span class="line"><span class="meta">        login = @SaCheckLogin,</span></span><br><span class="line"><span class="meta">        role = @SaCheckRole(&quot;admin&quot;),</span></span><br><span class="line"><span class="meta">        permission = @SaCheckPermission(&quot;user.add&quot;),</span></span><br><span class="line"><span class="meta">        safe = @SaCheckSafe(&quot;update-password&quot;),</span></span><br><span class="line"><span class="meta">        httpBasic = @SaCheckHttpBasic(account = &quot;sa:123456&quot;),</span></span><br><span class="line"><span class="meta">        disable = @SaCheckDisable(&quot;submit-orders&quot;)</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SaResult <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="keyword">return</span> SaResult.ok(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前客户端只要有 [ login 账号登录] 或者 [user 账号登录] 其一，就可以通过验证进入方法。</span></span><br><span class="line"><span class="comment">//         注意：`type = &quot;login&quot;` 和 `type = &quot;user&quot;` 是多账号模式章节的扩展属性，此处你可以先略过这个知识点。</span></span><br><span class="line"><span class="meta">@SaCheckOr(</span></span><br><span class="line"><span class="meta">    login = &#123; @SaCheckLogin(type = &quot;login&quot;), @SaCheckLogin(type = &quot;user&quot;) &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SaResult <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="keyword">return</span> SaResult.ok(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当你在一个方法上写多个注解鉴权时，其默认就是要满足所有注解规则后，才可以进入方法，只要有一个不满足，就会抛出异常</span></span><br><span class="line"><span class="meta">@SaCheckLogin</span></span><br><span class="line"><span class="meta">@SaCheckRole(&quot;admin&quot;)</span></span><br><span class="line"><span class="meta">@SaCheckPermission(&quot;user.add&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SaResult <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="keyword">return</span> SaResult.ok(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>路由拦截鉴权：</li></ol><p>实际开发中，我们常有登录拦截相关的需求，即项目中所有接口均需要登录认证，只有 “登录接口” 本身对外开放，在这个需求中我们真正需要的是一种基于路由拦截的鉴权模式。</p><p>我们在注解鉴权中注册了 Sa-Token 拦截器，而路由拦截鉴权正是在该拦截器上进行编辑配置的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 注册 Sa-Token 拦截器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;注册 Sa-Token 拦截器&quot;</span>);</span><br><span class="line">    registry.addInterceptor(</span><br><span class="line">        <span class="comment">// 绑定 checkLogin 方法，对路由进行登录验证</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SaInterceptor</span>(handle -&gt; StpUtil.checkLogin()))</span><br><span class="line">        .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        <span class="comment">// 放行登录路由接口</span></span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，即配置了最基础的登录路由拦截，除登录接口以外均需要登录才可访问。</p><p>读者亦可采用更复杂的配置，以此实现一些特殊的逻辑功能（如多端多权）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaTokenConfigure</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">// 注册 Sa-Token 的拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 注册路由拦截器，自定义认证规则 </span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">SaInterceptor</span>(handler -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 登录校验 -- 拦截所有路由，并排除/user/doLogin 用于开放登录 </span></span><br><span class="line">            SaRouter.match(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;/user/doLogin&quot;</span>, r -&gt; StpUtil.checkLogin());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 角色校验 -- 拦截以 admin 开头的路由，必须具备 admin 角色或者 super-admin 角色才可以通过认证 </span></span><br><span class="line">            SaRouter.match(<span class="string">&quot;/admin/**&quot;</span>, r -&gt; StpUtil.checkRoleOr(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;super-admin&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 权限校验 -- 不同模块校验不同权限 </span></span><br><span class="line">            SaRouter.match(<span class="string">&quot;/user/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">            SaRouter.match(<span class="string">&quot;/admin/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">            SaRouter.match(<span class="string">&quot;/goods/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;goods&quot;</span>));</span><br><span class="line">            SaRouter.match(<span class="string">&quot;/orders/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;orders&quot;</span>));</span><br><span class="line">            SaRouter.match(<span class="string">&quot;/notice/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;notice&quot;</span>));</span><br><span class="line">            SaRouter.match(<span class="string">&quot;/comment/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;comment&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 甚至你可以随意的写一个打印语句</span></span><br><span class="line">            SaRouter.match(<span class="string">&quot;/**&quot;</span>, r -&gt; System.out.println(<span class="string">&quot;----啦啦啦----&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 连缀写法</span></span><br><span class="line">            SaRouter.match(<span class="string">&quot;/**&quot;</span>).check(r -&gt; System.out.println(<span class="string">&quot;----啦啦啦----&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;)).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Sa-Token </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 加密验证 </tag>
            
            <tag> Sa-Token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sa-Token（二）实现登录注销操作</title>
      <link href="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>目录</strong><br>一、<a href="https://blog.amane64.site/2025/02/11/Sa-Token%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%85%8D%E7%BD%AE/">简介与配置</a><br>二、实现登录注销操作  &lt;— 你在这里 ( •̀ ω •́ )y<br>三、<a href="">权限认证构成与鉴权方法</a><br>四、<a href="">RBAC 结构实现</a></p></blockquote><h2 id="Sa-Token（二）实现登录注销操作"><a href="#Sa-Token（二）实现登录注销操作" class="headerlink" title="Sa-Token（二）实现登录注销操作"></a>Sa-Token（二）实现登录注销操作</h2><blockquote><p>[!NOTE]</p><p>博主前言：Spring Security 的学习真是惊掉我下巴，就一个鉴权功能，搞那么多复杂概念，又是过滤器链又是注入的，花了我一个星期左右，实际上还很不好用（未知错误给前端返回 401 是真绷不住）。Sa-Token 作为国产鉴权，性能更强的同时简化开发的程度相比 Spring Security 起码有十倍不止。最近我还注意到对标 Spring 生态的 Solon 框架，也是国产，性能提升3倍多，内存占用减少 50%+，打包还更小，真不知道这些工作为什么老外都做的这么复杂。</p></blockquote><p>经过刚才的配置，我们已经对 Sa-Token 有了初步的了解，接下来要实现接入数据库的，真正的登录注销操作。</p><hr><h3 id="一，理解概念与分析需求"><a href="#一，理解概念与分析需求" class="headerlink" title="一，理解概念与分析需求"></a>一，理解概念与分析需求</h3><ol><li><p><code>Cookie</code>与前后端分离</p><p>常规 Web 端鉴权方法，一般由<code>Cookie</code>完成，而<code>Cookie</code>有两个特性：</p><ol><li>可由后端控制写入。</li><li>每次请求自动提交。</li></ol><p>这就使得我们在前端代码中，无需任何特殊操作，就能完成鉴权的全部流程（因为整个流程都是后端控制完成的）</p><p>我们在上一章初步实现登录时，发现没有显式返回<code>token</code>。实际上，<code>StpUtil.login(id)</code>方法利用了<code>Cookie</code>自动注入的特性，省略了你手写返回<code>token</code>的代码。</p><p>但是，对于前后端分离框架（如<code>APP</code>和小程序），后端无法控制<code>Cookie</code>的写入，我们就需要显式返回<code>token</code>，前端存储在本地，每次请求时，封装到<code>header</code>内，供后端校验。</p></li><li><p>分析需求</p><ul><li>登录：<ul><li>传递：账号与密码，供后端校验</li><li>返回：该用户的数据（不含密码）和<code>token</code></li></ul></li><li>登出：<ul><li>传递：前端只发起请求，后端要根据当前会话执行登出</li><li>返回：无，可以返回一些登出成功回调信息</li></ul></li></ul><p>另外，我们还需要<strong>配置单向密码加密</strong>，不能明文存储密码，也不能明文比对密码。</p></li></ol><hr><h3 id="二、准备数据模型"><a href="#二、准备数据模型" class="headerlink" title="二、准备数据模型"></a>二、准备数据模型</h3><blockquote><p>[!IMPORTANT]</p><p>本文基于 Mybatis Plus 处理数据层逻辑，构建<code>Service</code>层和<code>Mapper</code>层的代码这里不再赘述。</p></blockquote><p>我们需要自定义一个用户类：</p><table><thead><tr><th align="center">列名</th><th align="center">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id（主键）</td><td align="center">bigint</td><td align="center">用户主键</td></tr><tr><td align="center">account</td><td align="center">varchar(32)</td><td align="center">账号</td></tr><tr><td align="center">password</td><td align="center">varchar(64)</td><td align="center">密码</td></tr></tbody></table><p>建表语句：</p><blockquote><p>[!NOTE]</p><p>下述命令将创建用户<code>admin</code>，密码明文为 <strong>password</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;主键，&#x27;</span>,</span><br><span class="line">  `account` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_zh_0900_as_cs <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;账号，&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_zh_0900_as_cs <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;密码，&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `account_unique`(`account` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="keyword">CHARACTER SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_zh_0900_as_cs COMMENT <span class="operator">=</span> <span class="string">&#x27;用户&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;$2a$10$94dB3lFHtaAMu9fznn2enO658xu.dvWMCn8qSg0tjfe4/1st.7tyS&#x27;</span>);</span><br></pre></td></tr></table></figure><p>对应数据模型类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试用用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Serial</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义用户登录回调<code>UserLoginVO</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录成功响应体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginVO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，准备登录<code>Controller</code>及相关接口：</p><blockquote><p>[!TIP]</p><p>这里的返回结构为我自定，读者亦可自定</p><p>Sa-Token 亦提供了一套返回封装<code>SaResult</code>，读者可自行尝试</p><p>代码参考如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回结果封装体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 数据体类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@JSONField(format=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime requestTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.requestTime = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  数据体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        res.code = RequestEnum.SUCCESS.getCode();</span><br><span class="line">        res.message = RequestEnum.SUCCESS.getMessage();</span><br><span class="line">        res.data = data;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功回调（空回调）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;?&gt; success() &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 状态信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;?&gt; error(<span class="type">int</span> code, String message) &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        res.code = code;</span><br><span class="line">        res.message = message;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录登出控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account  账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 登录成功回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;UserLoginVO&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@NotNull</span> String account, <span class="meta">@NotNull</span> String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.login(account, password));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; logout() &#123;</span><br><span class="line">        userService.logout();</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、逻辑实现"><a href="#三、逻辑实现" class="headerlink" title="三、逻辑实现"></a>三、逻辑实现</h3><p>首先，定义服务层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account  账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 登录成功回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UserLoginVO <span class="title function_">login</span><span class="params">(<span class="meta">@NotNull</span> String account, <span class="meta">@NotNull</span> String password)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserLoginVO <span class="title function_">login</span><span class="params">(String account, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// todo undone</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// todo undone</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现登录逻辑：</p><blockquote><p>[!TIP]</p><p><code>LocalStringUtils</code>为我个人定义的字符串工具，检验一个字符串是否为<code>null</code>、为空或全为空格，读者可自定义或使用其它现成的包。</p><p><code>BaseRequestException(RequestEnum.REQUEST_EMPTY)</code>为我个人定义的异常，旨在参数为空时抛出，之后自动向前端返回<code>HTTP 400</code>的欲封装回调，读者亦可自定义全局异常处理，参考这篇文章：<a href="https://blog.amane64.site/2023/08/18/Spring%20Boot%20%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E9%85%8D%E7%BD%AE">Spring Boot 全局异常拦截配置</a></p><p><code>BCrypt.checkpw(raw, hashed)</code>为 Sa-Token 封装的<code>BCrypt</code>加密验证工具，关于<code>BCrypt</code>算法，参考：<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE">Spring Security（三）基础自定义配置</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserLoginVO <span class="title function_">login</span><span class="params">(String account, String password)</span> &#123;</span><br><span class="line">    <span class="comment">// 检验数据合法性</span></span><br><span class="line">    <span class="keyword">if</span> (LocalStringUtils.isEmpty(account)</span><br><span class="line">            || LocalStringUtils.isEmpty(password))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseRequestException</span>(RequestEnum.REQUEST_EMPTY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比对账号密码，执行登录</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.getOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            .eq(User::getAccount, account));</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseRequestException</span>(RequestEnum.USER_NOT_EXIST);</span><br><span class="line">    <span class="keyword">if</span> (!BCrypt.checkpw(password, user.getPassword()))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseRequestException</span>(RequestEnum.ACCOUNT_PASSWORD_ERROR);</span><br><span class="line">    StpUtil.login(user.getId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装并返回</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserLoginVO</span>();</span><br><span class="line">    BeanUtils.copyProperties(user, vo);</span><br><span class="line">    vo.setToken(StpUtil.getTokenValue());</span><br><span class="line">    <span class="keyword">return</span> vo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现登出逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!StpUtil.isLogin()) <span class="keyword">return</span>;</span><br><span class="line">    StpUtil.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局异常拦截里，处理未登录异常返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(NotLoginException.class)</span></span><br><span class="line"><span class="meta">@ResponseStatus(HttpStatus.UNAUTHORIZED)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; notLoginException(NotLoginException e) &#123;</span><br><span class="line">    <span class="comment">// 具体实现略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h3><ol><li>前后端不分离，<code>Cookie</code>方式</li></ol><p>执行登录：</p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E7%99%BB%E5%BD%95-Cookie.png" alt="登录-Cookie"></p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E7%99%BB%E5%BD%95%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA-Cookie.png" alt="登录终端输出-Cookie"></p><p>手动封装<code>Cookie</code>：</p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E5%B0%81%E8%A3%85-Cookie.png" alt="封装-Cookie"></p><p>登出，可以看到能根据<code>Cookie</code>正确识别当前用户：</p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E7%99%BB%E5%87%BA-Cookie.png" alt="登出-Cookie"></p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E7%99%BB%E5%87%BA%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA-Cookie.png" alt="登出终端输出-Cookie"></p><ol start="2"><li>前后端分离，<code>Header</code>传递<code>token</code></li></ol><p>手动清空<code>Cookie</code>：</p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E5%88%A0%E9%99%A4Cookie.png" alt="删除Cookie"></p><p>执行登录：</p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E7%99%BB%E5%BD%95-Header.png" alt="登录-Header"></p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E7%99%BB%E5%BD%95%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA-Header.png" alt="登录终端输出-Header"></p><p>封装<code>Header</code>：</p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E5%B0%81%E8%A3%85-Header.png" alt="封装-Header"></p><p>登出，可以看到能根据<code>Header</code>正确识别当前用户：</p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E7%99%BB%E5%87%BA-Header.png" alt="登出-Header"></p><p><img src="/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/%E7%99%BB%E5%87%BA%E7%BB%88%E7%AB%AF%E8%BE%93%E5%87%BA-Header.png" alt="登出终端输出-Header"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Sa-Token </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 加密验证 </tag>
            
            <tag> Sa-Token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sa-Token（一）简介与配置</title>
      <link href="/2025/02/11/Sa-Token%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/02/11/Sa-Token%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>目录</strong><br>一、简介与配置  &lt;— 你在这里 ( •̀ ω •́ )y<br>二、<a href="https://blog.amane64.site/2025/02/12/Sa-Token%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E6%93%8D%E4%BD%9C/">实现登录注销操作</a><br>三、<a href="">权限认证构成与鉴权方法</a><br>四、<a href="">RBAC 结构实现</a></p></blockquote><h2 id="Sa-Token（一）简介与配置"><a href="#Sa-Token（一）简介与配置" class="headerlink" title="Sa-Token（一）简介与配置"></a>Sa-Token（一）简介与配置</h2><blockquote><p>[!NOTE]</p><p>博主前言：Spring Security 的学习真是惊掉我下巴，就一个鉴权功能，搞那么多复杂概念，又是过滤器链又是注入的，花了我一个星期左右，实际上还很不好用（未知错误给前端返回 401 是真绷不住）。Sa-Token 作为国产鉴权，性能更强的同时简化开发的程度相比 Spring Security 起码有十倍不止。最近我还注意到对标 Spring 生态的 Solon 框架，也是国产，性能提升3倍多，内存占用减少 50%+，打包还更小，真不知道这些工作为什么老外都做的这么复杂。</p></blockquote><h3 id="一、Sa-Token-简介及作用"><a href="#一、Sa-Token-简介及作用" class="headerlink" title="一、Sa-Token 简介及作用"></a>一、Sa-Token 简介及作用</h3><p>以下摘抄自官网：</p><blockquote><p><strong>Sa-Token</strong> 是一个轻量级 Java 权限认证框架，主要解决：<strong>登录认证</strong>、<strong>权限认证</strong>、<strong>单点登录</strong>、<strong>OAuth2.0</strong>、<strong>分布式Session会话</strong>、<strong>微服务网关鉴权</strong> 等一系列权限相关问题。</p><p>Sa-Token 旨在以简单、优雅的方式完成系统的权限认证部分，以登录认证为例，你只需要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会话登录，参数填登录人的账号id </span></span><br><span class="line">StpUtil.login(<span class="number">10001</span>);</span><br></pre></td></tr></table></figure><p>无需实现任何接口，无需创建任何配置文件，只需要这一句静态代码的调用，便可以完成会话登录认证。</p><p>如果一个接口需要登录后才能访问，我们只需调用以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 校验当前客户端是否已经登录，如果未登录则抛出 `NotLoginException` 异常</span></span><br><span class="line">StpUtil.checkLogin();</span><br></pre></td></tr></table></figure><p>在 Sa-Token 中，大多数功能都可以一行代码解决。</p></blockquote><p>十分地简洁，简洁到无话可说。对比 Spring Security ，其配置工作简直抓狂，来看看 Spring Security 的配置代码（之一）：</p><blockquote><p>[!TIP]</p><p>下述代码还只是配置，你还得手写登录状态持久化，手写权限配置，手写异常处理……简直是暴殄天物，一相对比高下立判。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Security 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecurityResultHandler securityResultHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BCrypt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring Security 过滤器链配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http 请求体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 过滤器链</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                <span class="comment">// 关掉 csrf 用于本地调试（务必在项目正式上线时开启！！！）</span></span><br><span class="line">                .csrf(AbstractHttpConfigurer::disable)</span><br><span class="line">                <span class="comment">// 准许跨域访问</span></span><br><span class="line">                .cors(Customizer.withDefaults())</span><br><span class="line">                <span class="comment">// 对来自 http/https 的请求的授权保护方法</span></span><br><span class="line">                .authorizeHttpRequests(authorize -&gt; authorize</span><br><span class="line">                        <span class="comment">// 配置不同终端访问权限</span></span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/manager/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/client/**&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                        <span class="comment">// 放行登录接口</span></span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">                        <span class="comment">// 对所有请求均做授权保护，已认证的会自动授权</span></span><br><span class="line">                        .anyRequest().authenticated())</span><br><span class="line">                <span class="comment">// 禁用表单授权登录</span></span><br><span class="line">                .formLogin(AbstractHttpConfigurer::disable)</span><br><span class="line">                <span class="comment">// 禁用 HTTP Basic 登录</span></span><br><span class="line">                .httpBasic(AbstractHttpConfigurer::disable)</span><br><span class="line">                <span class="comment">// 自定义异常处理</span></span><br><span class="line">                .exceptionHandling(exception -&gt; exception</span><br><span class="line">                        <span class="comment">// 登录异常（请求未认证）处理</span></span><br><span class="line">                        .authenticationEntryPoint(securityResultHandler)</span><br><span class="line">                        <span class="comment">// 无权限访问处理</span></span><br><span class="line">                        .accessDeniedHandler(securityResultHandler)</span><br><span class="line">                )</span><br><span class="line">                <span class="comment">// 注册 jwt 拦截器</span></span><br><span class="line">                .addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总之，不愧为轻量级鉴权框架，近期各大 git 平台的 star 数暴涨，相信过不了多久将会成为主流鉴权框架。赶紧丢弃老旧的 Spring Security 吧，<del>我们先进的 Sa-Token 已经完全超越了老旧的 Spring Security。</del></p><hr><h3 id="二、集成配置"><a href="#二、集成配置" class="headerlink" title="二、集成配置"></a>二、集成配置</h3><p>首先构建一个 web 应用。</p><blockquote><p>[!IMPORTANT]</p><p>博主使用 Java 17，Spring boot 3.4.1 框架，所用依赖 maven 配置参考：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter Web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter Test --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter Validation --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于给 apifox 的插件打标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis-Plus Spring Boot3 引入可选模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis-Plus jdk 11+ 引入可选模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>应用构建好之后，我们正式开始。</p><ol><li>引入相关依赖</li></ol><blockquote><p>[!WARNING]</p><p><artifactId> 这一项，spring-boot后面有个<strong>3</strong>，若使用spring boot 2.x 框架，请去掉 3</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Sa-Token 权限认证，在线文档：https://sa-token.cc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.40.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改配置文件（application.yml）</li></ol><p>可以<strong>零配置启动项目</strong>，但还是建议做一些配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sa-Token 配置 (文档: https://sa-token.cc)</span></span><br><span class="line"><span class="attr">sa-token:</span></span><br><span class="line">  <span class="comment"># token 名称（同时也是 cookie 名称）</span></span><br><span class="line">  <span class="attr">token-name:</span> <span class="string">sa-token</span></span><br><span class="line">  <span class="comment"># token 有效期（单位：秒） 默认30天，-1 代表永久有效</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结</span></span><br><span class="line">  <span class="attr">active-timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）</span></span><br><span class="line">  <span class="attr">is-concurrent:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）</span></span><br><span class="line">  <span class="attr">is-share:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）</span></span><br><span class="line">  <span class="attr">token-style:</span> <span class="string">uuid</span></span><br><span class="line">  <span class="comment"># 是否输出操作日志 </span></span><br><span class="line">  <span class="attr">is-log:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建测试Controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;doLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doLogin</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 此处仅作模拟示例，真实项目需要从数据库中查询数据进行比对</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;zhang&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">            StpUtil.login(<span class="number">10001</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;登录失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;isLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">isLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;当前会话是否登录：&quot;</span> + StpUtil.isLogin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试运行</li></ol><p><img src="/2025/02/11/Sa-Token%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%85%8D%E7%BD%AE/%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F.png" alt="登录成功"></p><p><img src="/2025/02/11/Sa-Token%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%85%8D%E7%BD%AE/%E9%AA%8C%E8%AF%81%E7%99%BB%E5%BD%95.png" alt="验证登录"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Sa-Token </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 加密验证 </tag>
            
            <tag> Sa-Token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码层多对多结构的通用处理</title>
      <link href="/2025/01/26/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%9A%E7%94%A8%E5%A4%84%E7%90%86/"/>
      <url>/2025/01/26/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%9A%E7%94%A8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="多对多结构的通用处理"><a href="#多对多结构的通用处理" class="headerlink" title="多对多结构的通用处理"></a>多对多结构的通用处理</h2><blockquote><p>前言：本文基于 Mybatis-Plus Lombok 编写</p></blockquote><p>在日常开发过程中，经常会遇到一些多对多的结构，如图：</p><p><img src="/2025/01/26/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%9A%E7%94%A8%E5%A4%84%E7%90%86/image.png" alt="多对多结构的通用处理"></p><p>上图表示了一个经典的<code>RBAC</code>安全结构的一部分，用户和角色是一个多对多的关系。在关系型数据库中，通常的做法是创建一个链接键表，存储二者之间的链接关系。一个项目中往往存在多个多对多关系，也就有多个这样的链接键表，虽然表不一样，对应的外键字段也不一样，准备的<code>Mapper</code>也不一样，但是其操作不能说毫无差别吧，只能是一模一样——无非是查找对应的数据和修改对应的数据。</p><p>所以，我们可以类似 Mybatis-Plus 的做法，定义并实现通用接口，再让对应的<code>Service</code>继承即可。</p><hr><h3 id="一、设计接口"><a href="#一、设计接口" class="headerlink" title="一、设计接口"></a>一、设计接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链接键服务接口基类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;A&gt;  链接对象 A</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;B&gt;  链接对象 B</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;LK&gt; 链接键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LkService</span>&lt;A <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>, B <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>, LK <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &amp; LkEntity&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建链接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aId A 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bId B 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createLink</span><span class="params">(Long aId, Long bId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 B 主键，获取 A 列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bId B 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;A&gt; <span class="title function_">getAList</span><span class="params">(Long bId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 A 主键，获取 B 列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aId A 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> B 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;B&gt; <span class="title function_">getBList</span><span class="params">(Long aId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 B 主键，获取 A 主键列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bId B 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">getAIdList</span><span class="params">(Long bId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 A 主键，获取 B 主键列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aId A 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> B 列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">getBIdList</span><span class="params">(Long aId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 A 主键，获取链接键列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aId A 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 链接键列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;LK&gt; <span class="title function_">getLkListByAId</span><span class="params">(Long aId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 B 主键，获取链接键列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bId B 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 链接键列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;LK&gt; <span class="title function_">getLkListByBId</span><span class="params">(Long bId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换 A 链接的对象&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 列表可以为空但不能为 null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aId  目标 A 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bIds 新的 B 主键列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateALinks</span><span class="params">(Long aId, List&lt;Long&gt; bIds)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换 B 链接的对象&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 列表可以为空但不能为 null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bId  目标 B 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aIds 新的 A 主键列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBLinks</span><span class="params">(Long bId, List&lt;Long&gt; aIds)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据结构基类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Serial</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链接键适配接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LkEntity</span> &#123;</span><br><span class="line">    Long <span class="title function_">getAId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setAId</span><span class="params">(Long aId)</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">getBId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setBId</span><span class="params">(Long bId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二、通用实现"><a href="#二、通用实现" class="headerlink" title="二、通用实现"></a>二、通用实现</h3><blockquote><p>&#x2F;(ㄒoㄒ)&#x2F; ~~  比较头疼的是，这里使用了六个泛型，分别对应了链接键的两个端点实体类和链接键实体类，以及它们的<code>Mapper</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链接键服务接口通用实现方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;A&gt;        链接类 A</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;B&gt;        链接类 B</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;LK&gt;       链接键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;AMapper&gt;  链接类 A 的 Mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;BMapper&gt;  链接类 B 的 Mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;LKMapper&gt; 链接键 的 Mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LkServiceImpl</span>&lt;A <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>, B <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>, LK <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &amp; LkEntity,</span><br><span class="line">        AMapper <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;A&gt;, BMapper <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;B&gt;, LKMapper <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;LK&gt;&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;LKMapper, LK&gt; <span class="keyword">implements</span> <span class="title class_">LkService</span>&lt;A, B, LK&gt;, IService&lt;LK&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AMapper aMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BMapper bMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;LK&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createLink</span><span class="params">(Long aId, Long bId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">LK</span> <span class="variable">lk</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">            lk.setAId(aId);</span><br><span class="line">            lk.setBId(bId);</span><br><span class="line">            save(lk);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;链接键是抽象类或接口，或者链接键没有无参构造函数&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;链接键构造函数私有化&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;链接键构造函数内部异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;链接键没有符合要求的构造函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;A&gt; <span class="title function_">getAList</span><span class="params">(Long bId)</span> &#123;</span><br><span class="line">        List&lt;Long&gt; aIdList = getAIdList(bId);</span><br><span class="line">        <span class="keyword">if</span> (aIdList.isEmpty()) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> aMapper.selectByIds(aIdList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;B&gt; <span class="title function_">getBList</span><span class="params">(Long aId)</span> &#123;</span><br><span class="line">        List&lt;Long&gt; bIdList = getBIdList(aId);</span><br><span class="line">        <span class="keyword">if</span> (bIdList.isEmpty()) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> bMapper.selectByIds(bIdList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">getAIdList</span><span class="params">(Long bId)</span> &#123;</span><br><span class="line">        List&lt;LK&gt; lkList = getLkListByBId(bId);</span><br><span class="line">        <span class="type">var</span> <span class="variable">aIds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Long&gt;();</span><br><span class="line">        lkList.forEach(lk -&gt; aIds.add(lk.getAId()));</span><br><span class="line">        <span class="keyword">return</span> aIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">getBIdList</span><span class="params">(Long aId)</span> &#123;</span><br><span class="line">        List&lt;LK&gt; lkList = getLkListByAId(aId);</span><br><span class="line">        <span class="type">var</span> <span class="variable">bIds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Long&gt;();</span><br><span class="line">        lkList.forEach(lk -&gt; bIds.add(lk.getBId()));</span><br><span class="line">        <span class="keyword">return</span> bIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;LK&gt; <span class="title function_">getLkListByAId</span><span class="params">(Long aId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;LK&gt;().eq(getFieldName(<span class="string">&quot;A&quot;</span>), aId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;LK&gt; <span class="title function_">getLkListByBId</span><span class="params">(Long bId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;LK&gt;().eq(getFieldName(<span class="string">&quot;B&quot;</span>), bId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateALinks</span><span class="params">(Long aId, List&lt;Long&gt; bIds)</span> &#123;</span><br><span class="line">        removeByIds(getLkListByAId(aId));</span><br><span class="line">        bIds.forEach(bId -&gt; createLink(aId, bId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBLinks</span><span class="params">(Long bId, List&lt;Long&gt; aIds)</span> &#123;</span><br><span class="line">        removeByIds(getLkListByBId(bId));</span><br><span class="line">        aIds.forEach(aId -&gt; createLink(aId, bId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取链接键字段名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target A or B</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字段名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getFieldName</span><span class="params">(String target)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(LkField.class)) &#123;</span><br><span class="line">                <span class="type">LkField</span> <span class="variable">lkField</span> <span class="operator">=</span> field.getAnnotation(LkField.class);</span><br><span class="line">                <span class="keyword">if</span> (lkField.position().equals(target)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> lkField.fieldName();</span><br><span class="line">                    <span class="keyword">if</span> (fieldName.equals(<span class="string">&quot;no.set&quot;</span>))</span><br><span class="line">                        fieldName = field.getName();</span><br><span class="line">                    <span class="keyword">return</span> LocalStringUtils.convertToUnderscore(fieldName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;未使用 @LkField 注解标明链接端点字段&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用例：</p><blockquote><p>注意：需要在构造函数处注入并传参</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LkUserRoleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">LkServiceImpl</span>&lt;User, Role, ILkUserRole, UserMapper, RoleMapper, LkUserRoleMapper&gt; <span class="keyword">implements</span> <span class="title class_">LkUserRoleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LkUserRoleServiceImpl</span><span class="params">(UserMapper userMapper, RoleMapper roleMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(userMapper, roleMapper, ILkUserRole.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、解释部分重要的底层代码"><a href="#三、解释部分重要的底层代码" class="headerlink" title="三、解释部分重要的底层代码"></a>三、解释部分重要的底层代码</h3><ol><li>创建链接记录：<br> 因为泛型在编译阶段会被擦除，所以不能直接用其创建对象，需要在构造函数注入的阶段，传入一个对应的Class对象用作生成。<br> 关键代码：</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LK</span> <span class="variable">lk</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br></pre></td></tr></table></figure><ol start="2"><li><code>@LkField</code>注解解释与配置:<br> 在上面的实现中，编写了一个私有方法，解析了<code>@LkField</code>这个注解。我们注意到，对于链接键表，其端点字段均不同，如例子中的为<code>user_id</code>和<code>role_id</code>。为了解决这个问题，我们需要在实体类上对应的属性加上注解，标明哪些是端点字段。<br> 我们规定，<code>fieldName</code>为字段名，若未设置，默认解析类的属性名的下划线格式为字段名；<code>position</code>为对应位置，只传入<code>A</code>或<code>B</code>，对应链接键的两个端点。<br> 关键代码：</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取链接键字段名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target A or B</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 字段名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">private</span> String <span class="title function_">getFieldName</span><span class="params">(String target)</span> &#123;</span><br><span class="line">     <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (field.isAnnotationPresent(LkField.class)) &#123;</span><br><span class="line">             <span class="type">LkField</span> <span class="variable">lkField</span> <span class="operator">=</span> field.getAnnotation(LkField.class);</span><br><span class="line">             <span class="keyword">if</span> (lkField.position().equals(target)) &#123;</span><br><span class="line">                 <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> lkField.fieldName();</span><br><span class="line">                 <span class="keyword">if</span> (fieldName.equals(<span class="string">&quot;no.set&quot;</span>))</span><br><span class="line">                     fieldName = field.getName();</span><br><span class="line">                 <span class="keyword">return</span> LocalStringUtils.convertToUnderscore(fieldName);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;未使用 @LkField 注解标明链接端点字段&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 注解代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.FIELD)</span>  <span class="comment">// 注解用于字段</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 注解在运行时可见</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LkField &#123;</span><br><span class="line">    String <span class="title function_">fieldName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;no.set&quot;</span>;</span><br><span class="line">    String <span class="title function_">position</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 使用例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户角色连接键</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@TableName</span> lk_user_role</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;lk_user_role&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ILkUserRole</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">LkEntity</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户主键</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@LkField(position = &quot;A&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 角色主键</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@LkField(position = &quot;B&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getAId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAId</span><span class="params">(Long aId)</span> &#123;</span><br><span class="line">        userId = aId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getBId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roleId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBId</span><span class="params">(Long bId)</span> &#123;</span><br><span class="line">        roleId = bId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（八）集成 Redis</title>
      <link href="/2025/01/17/Spring%20Security%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E6%88%90%20Redis/"/>
      <url>/2025/01/17/Spring%20Security%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E6%88%90%20Redis/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>一、<a href="https://blog.amane64.site/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/">引入依赖及原理简述</a><br>二、<a href="https://blog.amane64.site/2025/01/14/Spring-Security%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BB%B4%E6%8A%A4%E9%85%8D%E7%BD%AE/">多用户维护配置</a><br>三、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/">基础自定义配置</a><br>四、<a href="(https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%8A%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%9C%E7%AE%A1%E7%90%86/)">前后端分离及登录结果管理</a>&gt; 五、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/">角色权限管理基础</a></p><hr><p>从此处开始，为新的原创内容，相关数据结构代码换了一套新的，与之前的代码关系不大了。<br>建议新建一个项目，将配置文件复制过来，然后按照步骤走。</p><p>六、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/">RBAC 结构实现</a><br>七、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E4%B8%83%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%BC%8F%E7%99%BB%E5%BD%95%E4%B8%8E%20JWT%20%E9%85%8D%E7%BD%AE/">自定义响应式登录与 JWT 配置</a><br>八、集成 Redis &lt;— 你在这里 ( •̀ ω •́ )y</p></blockquote><h2 id="Spring-Security（八）集成-Redis"><a href="#Spring-Security（八）集成-Redis" class="headerlink" title="Spring Security（八）集成 Redis"></a>Spring Security（八）集成 Redis</h2><blockquote><p>博主前言：本以为这个就是代替传统 jwt 的插件，没想到复杂程度如此之高。Spring Security 本身是个高度自定义化的组件，必须花时间重点学习一下。以下为个人配置学习的流程，从零到权限管理、redis嵌入等步骤。<br>本文基于尚硅谷的 Spring Security 教程学习，文章与原教程有不小出入，仅供参考。<br>B站视频链接：<a href="https://www.bilibili.com/video/BV14b4y1A7Wz">尚硅谷Java项目SpringSecurity+OAuth2权限管理实战教程</a></p></blockquote><p>这一篇最大的难点在于，为什么要集成<code>redis</code>，以及要替换掉 Spring Security 上的那一部分。我在网上冲浪了很久，始终不明确集成的意义。都是用一台计算机上的内存，有什么性能上的优势吗？</p><p>实际上，问题无外乎以下两点：</p><pre><code>- 重启后数据会丢失。- 无法在分布式环境中共享数据。</code></pre><p>对于单部署的小应用来说，确实优势不大。但是对于微服务这种跨机器的后台网络，<code>redis</code>是必不可少的。因为在访问请求后，<code>token</code>的数据存储到本机的线程上，这使得其他机器访问不到该线程，从而拿不到用户的数据，很多业务也就无法进行。指定一个机器运行<code>redis</code>，让其他机器通过该机器拿用户数据，就解决了这个问题。</p><p>还有一个问题是，对于<code>token</code>，我们不能在上面存放太多数据，不然会变得很长——存对象的<code>token</code>要比只存<code>id</code>的<code>token</code>长上数倍，而且每次访问接口都要现场解析复杂的<code>token</code>，浪费性能。更何况解析的时候往往产生序列相关的异常，总之就是十分麻烦。</p><p>我们可以只在<code>token</code>内存放<code>id</code>，登录的时候，不仅生成<code>token</code>，同时将用户数据存入<code>redis</code>，设<code>id</code>为键，这样每次访问接口，只需要快速解析出<code>id</code>，就能从<code>redis</code>获取用户数据，同时解决了复杂解析和序列化的两大难题，对于近些年来的后端程序，<code>redis</code>近乎是必备。</p><p>这么讲，集成<code>redis</code>的目的就很明确了：<strong>将原本和线程一并存储的用户数据分离，需要的时候在调用。</strong></p><hr><h3 id="一、配置redis"><a href="#一、配置redis" class="headerlink" title="一、配置redis"></a>一、配置<code>redis</code></h3><ol><li>引入依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编辑配置文件（application.yml）：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">      <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">password:</span>  <span class="comment"># 没有请留空</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">lettuce:</span></span><br><span class="line">          <span class="attr">pool:</span></span><br><span class="line">            <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">            <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">max-active:</span> <span class="number">200</span></span><br><span class="line">            <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置<code>redis</code>工具类：</li></ol><blockquote><p>[!IMPORTANT]</p><p><code>DatabaseException()</code>是我自定义的异常类，交由【全局异常管理】监听，读者可按需配置。</p><p>详见这篇文章：<a href="https://blog.amane64.site/2023/08/18/Spring-Boot-%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E9%85%8D%E7%BD%AE/">Spring Boot 全局异常拦截配置</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64 </span></span><br><span class="line"><span class="comment"><span class="doctag">@Slf</span>4j</span></span><br><span class="line"><span class="comment"><span class="doctag">@Component</span></span></span><br><span class="line"><span class="comment"><span class="doctag">@RequiredArgsConstructor</span></span></span><br><span class="line"><span class="comment">public class RedisUtils &#123;</span></span><br><span class="line"><span class="comment">    private final RedisTemplate&lt;String, String&gt; redisTemplate;</span></span><br><span class="line"><span class="comment">    private final JsonUtils jsonUtils;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    /**</span></span><br><span class="line"><span class="comment">     * 存入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setBySetTime(key, value, <span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入缓存，自定义过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value    值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout  过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBySetTime</span><span class="params">(String key, Object value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, jsonUtils.serialize(value), timeout, timeUnit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DatabaseException</span>(<span class="string">&quot;存入缓存数据出错：&quot;</span> + key);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;存入缓存数据：&#123;&#125;&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 值类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">get</span><span class="params">(String key, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        T res;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            res = jsonUtils.deserialize(redisTemplate.opsForValue().get(key), clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DatabaseException</span>(<span class="string">&quot;获取缓存数据出错：&quot;</span> + key);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;获取缓存数据：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断缓存是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存在返回 true，不存在返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(redisTemplate.hasKey(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasKey(key)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DatabaseException</span>(<span class="string">&quot;缓存数据不存在：&quot;</span> + key);</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">        log.debug(<span class="string">&quot;删除缓存数据：&#123;&#125;&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>配置序列化，供<code>redis</code>使用</li></ol><blockquote><p>[!IMPORTANT]</p><p>一般情况下是不需要序列化的，设置泛型为RedisTemplate&lt;String, Object&gt;，手动强转类型即可。</p><p>我有原创的监听Mybatis-Plus与Redis实现缓存同步的构造，必须使用双String的方式实现，故配置序列化。</p><p>对应文章传送门：[Mybatis-Plus 与 Redis 实现缓存同步]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化与反序列化转换器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">// 前端参数蛇形命名法</span></span><br><span class="line">        <span class="built_in">this</span>.setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="type">DeserializationConfig</span> <span class="variable">deserializationConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Json 序列化工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonUtils</span><span class="params">()</span> &#123;</span><br><span class="line">        objectMapper = <span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.writeValueAsString(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(String json, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.readValue(json, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>配置<code>redis</code>的<code>Config</code>类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;注册 redis 序列化器...&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, String&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二、登录时抽离用户数据，访问时配置数据到线程"><a href="#二、登录时抽离用户数据，访问时配置数据到线程" class="headerlink" title="二、登录时抽离用户数据，访问时配置数据到线程"></a>二、登录时抽离用户数据，访问时配置数据到线程</h3><ol><li>修改登录逻辑：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JWTProperties jwtProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LoginVO <span class="title function_">login</span><span class="params">(String account, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 验证登录，并存入缓存</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(account, password);</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成 token</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) authentication.getPrincipal();</span><br><span class="line">        <span class="type">var</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        claims.put(<span class="string">&quot;id&quot;</span>, user.getId());</span><br><span class="line">        <span class="type">var</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtils.createJWT(claims, jwtProperties.getKey(), jwtProperties.getTtl());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录用户数据</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span> + user.getId().toString();</span><br><span class="line">        <span class="keyword">if</span> (!redisUtils.hasKey(key))</span><br><span class="line">            redisUtils.setBySetTime(key, user, jwtProperties.getTtl(), TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装返回数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginVO</span>(user.getId(), user.getUsername(), token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改<code>jwt</code>拦截逻辑：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JWTProperties jwtProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisUtils redisUtils;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecurityUtils securityUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> HttpServletRequest request,</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> HttpServletResponse response,</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 放行登录接口</span></span><br><span class="line">        <span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">                &amp;&amp; request.getRequestURI().equals(<span class="string">&quot;/login&quot;</span>)) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并校验 token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getHeader());</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;请求头未传递 token&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;请求头未传递 token&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = JWTUtils.parseJWT(token, jwtProperties.getKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 签名无效&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 签名错误&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 算法不一致&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 过期&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;未知 token 拦截错误 &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取用户数据</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">id</span> <span class="operator">=</span> ((Number) claims.get(<span class="string">&quot;id&quot;</span>)).longValue();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> securityUtils.getCurrentUserById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置到线程并然后放行</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">                user.getId(), <span class="literal">null</span>, user.getAuthorities());</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>维护权限的反序列化</li></ol><blockquote><p>[!IMPORTANT]</p><p>因为<code>GrantedAuthority</code>为一个接口，需要为其特定维护，一般指定为<code>SimpleGrantedAuthority</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 针对 GrantedAuthority 的自定义反序列化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GrantedAuthorityDeserializer</span> <span class="keyword">extends</span> <span class="title class_">JsonDeserializer</span>&lt;List&lt;GrantedAuthority&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;GrantedAuthority&gt; <span class="title function_">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; authorityList = jsonParser.readValueAs(List.class);</span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        authorityList.forEach(authorityMap-&gt;&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">authority</span> <span class="operator">=</span> authorityMap.get(<span class="string">&quot;authority&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (authority != <span class="literal">null</span>) </span><br><span class="line">                authorities.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(authority));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User 权限列表字段上添加该注解</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="meta">@JsonDeserialize(using = GrantedAuthorityDeserializer.class)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="三、创建线程用户提取工具"><a href="#三、创建线程用户提取工具" class="headerlink" title="三、创建线程用户提取工具"></a>三、创建线程用户提取工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程用户提取工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="keyword">if</span> (authentication != <span class="literal">null</span> &amp;&amp; authentication.isAuthenticated()) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Long) authentication.getPrincipal();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurrentUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentUser().getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getCurrentUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentUserById(getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id获取缓存中的用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getCurrentUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span> + id;</span><br><span class="line">        User user;</span><br><span class="line">        <span class="keyword">if</span> (redisUtils.hasKey(key))</span><br><span class="line">            user = redisUtils.get(key, User.class);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            user = userService.getById(id);</span><br><span class="line">            user.setAuthorities(userService.getUserAuthorities(id));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>四、实现登出接口并维护<code>jwt</code>黑名单</p><p>为了防止用户登出之后<code>jwt</code>潜在的滥用风险，我们可以利用<code>redis</code>维护一个黑名单，持续时间为<code>token</code>的有效时间。</p><ol><li>创建登出接口及方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; logout(<span class="meta">@RequestHeader</span> Map&lt;String, String&gt; headers) &#123;</span><br><span class="line"> loginService.logout(headers.get(jwtProperties.getHeader().toLowerCase()));</span><br><span class="line"> <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">tokenKey</span> <span class="operator">=</span> <span class="string">&quot;deprecatedToken:&quot;</span> + token;</span><br><span class="line">    <span class="keyword">if</span> (!redisUtils.hasKey(tokenKey))</span><br><span class="line">    redisUtils.setBySetTime(tokenKey, token, jwtProperties.getTtl(), TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">userKey</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span> + SecurityUtils.getCurrentId();</span><br><span class="line">    <span class="keyword">if</span> (redisUtils.hasKey(userKey))</span><br><span class="line">    redisUtils.delete(userKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><code>jwt</code>拦截逻辑添加对弃用<code>token</code>的处理：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取并校验 token</span></span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getHeader());</span><br><span class="line"><span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;请求头未传递 token&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;请求头未传递 token&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (redisUtils.hasKey(<span class="string">&quot;deprecatedToken:&quot;</span> + token)) &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;token 已被弃用&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;token 已被弃用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他代码...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><code>Config</code>类中禁用原生登出方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁用原生登出</span></span><br><span class="line">http.logout(AbstractHttpConfigurer::disable)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此，Spring Security 集成<code>redis</code>已全部配置完毕。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring-Security </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（七）自定义响应式登录与 JWT 配置</title>
      <link href="/2025/01/17/Spring%20Security%EF%BC%88%E4%B8%83%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%BC%8F%E7%99%BB%E5%BD%95%E4%B8%8E%20JWT%20%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/01/17/Spring%20Security%EF%BC%88%E4%B8%83%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%BC%8F%E7%99%BB%E5%BD%95%E4%B8%8E%20JWT%20%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>一、<a href="https://blog.amane64.site/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/">引入依赖及原理简述</a><br>二、<a href="https://blog.amane64.site/2025/01/14/Spring-Security%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BB%B4%E6%8A%A4%E9%85%8D%E7%BD%AE/">多用户维护配置</a><br>三、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/">基础自定义配置</a><br>四、<a href="(https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%8A%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%9C%E7%AE%A1%E7%90%86/)">前后端分离及登录结果管理</a><br>五、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/">角色权限管理基础</a></p><hr><p>从此处开始，为新的原创内容，相关数据结构代码换了一套新的，与之前的代码关系不大了。<br>建议新建一个项目，将配置文件复制过来，然后按照步骤走。</p><p>六、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/">RBAC 结构实现</a><br>七、自定义响应式登录与 JWT 配置 &lt;— 你在这里 ( •̀ ω •́ )y<br>八、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E6%88%90%20Redis/">集成 Redis</a></p></blockquote><h2 id="Spring-Security（七）自定义响应式登录与-JWT-配置"><a href="#Spring-Security（七）自定义响应式登录与-JWT-配置" class="headerlink" title="Spring Security（七）自定义响应式登录与 JWT 配置"></a>Spring Security（七）自定义响应式登录与 JWT 配置</h2><blockquote><p>博主前言：本以为这个就是代替传统 jwt 的插件，没想到复杂程度如此之高。Spring Security 本身是个高度自定义化的组件，必须花时间重点学习一下。以下为个人配置学习的流程，从零到权限管理、redis嵌入等步骤。<br>本文基于尚硅谷的 Spring Security 教程学习，文章与原教程有不小出入，仅供参考。<br>B站视频链接：<a href="https://www.bilibili.com/video/BV14b4y1A7Wz">尚硅谷Java项目SpringSecurity+OAuth2权限管理实战教程</a></p></blockquote><p>Spring Security 自带的登录接口是基于表单形式的，而对于前后端分离项目，更多运用响应式的json形式。若想改为json，或者做更复杂的修改（例如双端双接口登录等），就需要自定义登录接口了。</p><blockquote><p>[!WARNING]</p><p>既然用到了<code>json</code>传递数据，这里就不再赘述【序列化与反序列化】的问题。</p></blockquote><hr><h3 id="一、前置准备工作"><a href="#一、前置准备工作" class="headerlink" title="一、前置准备工作"></a>一、前置准备工作</h3><blockquote><p>[!IMPORTANT]</p><p>数据结构请参考上一篇文章：六、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC-%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/">RBAC 结构实现</a></p></blockquote><ol><li>登录操作对应的<code>DTO</code>和<code>VO</code>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginVO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>引入<code>jwt</code>相关依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jwt 相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置文件编写<code>jwt</code>的相关信息：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">jwt-key</span>                <span class="comment"># 设置 jwt 签名加密时使用的秘钥</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="number">86400000</span>               <span class="comment"># 设置 jwt 过期时间</span></span><br><span class="line">  <span class="attr">header:</span> <span class="string">Authorization</span>       <span class="comment"># 设置前端传递过来的令牌名称</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编写对应的<code>Properties</code>类，导入配置信息：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;jwt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> ttl;</span><br><span class="line">    <span class="keyword">private</span> String header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>准备<code>jwt</code>工具类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SignatureAlgorithm</span> <span class="variable">SIGNATURE_ALGORITHM</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JWT令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims 载荷</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ttl    有效时长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, String key, Long ttl)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 签名算法和密钥</span></span><br><span class="line">                .signWith(SIGNATURE_ALGORITHM, key)</span><br><span class="line">                <span class="comment">// 载荷</span></span><br><span class="line">                .addClaims(claims)</span><br><span class="line">                <span class="comment">// 过期时间</span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + ttl))</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析JWT令牌</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 载荷</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String token, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(key)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><code>Controller</code>自定义登录登出接口：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;LoginVO&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginDTO dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(loginService.login(dto.getAccount(), dto.getPassword()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>准备<code>LoginService</code>，我们新的登录登出逻辑将在此实现：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    LoginVO <span class="title function_">login</span><span class="params">(String account, String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> LoginVO <span class="title function_">login</span><span class="params">(String account, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// todo 登录逻辑，并于 Spring Security 适配</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二、重写-Spring-Security-的登录实现"><a href="#二、重写-Spring-Security-的登录实现" class="headerlink" title="二、重写 Spring Security 的登录实现"></a>二、重写 Spring Security 的登录实现</h3><ol><li>修改<code>Config</code>，主要部分为重写基于数据库的身份验证实现和废弃掉旧的验证方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Security 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecurityResultHandler securityResultHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BCrypt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写基于数据库的身份验证实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">daoAuthenticationProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        <span class="comment">// 配置获取用户数据的方法</span></span><br><span class="line">        daoAuthenticationProvider.setUserDetailsService(userService);</span><br><span class="line">        <span class="comment">// 配置密码加密器</span></span><br><span class="line">        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProviderManager</span>(daoAuthenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring Security 过滤器链配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http 请求体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 过滤器链</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                <span class="comment">// 关掉 csrf 用于本地调试（务必在项目正式上线时开启！！！）</span></span><br><span class="line">                .csrf(AbstractHttpConfigurer::disable)</span><br><span class="line">                <span class="comment">// 准许跨域访问</span></span><br><span class="line">                .cors(Customizer.withDefaults())</span><br><span class="line">                <span class="comment">// 对来自 http/https 的请求的授权保护方法</span></span><br><span class="line">                .authorizeHttpRequests(authorize -&gt; authorize</span><br><span class="line">                        <span class="comment">// 配置不同终端访问权限</span></span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                        <span class="comment">// 放行登录接口</span></span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">                        <span class="comment">// 对所有请求均做授权保护，已认证的会自动授权</span></span><br><span class="line">                        .anyRequest().authenticated())</span><br><span class="line">                <span class="comment">// 禁用表单授权登录</span></span><br><span class="line">                .formLogin(AbstractHttpConfigurer::disable)</span><br><span class="line">                <span class="comment">// 禁用 HTTP Basic 登录</span></span><br><span class="line">                .httpBasic(AbstractHttpConfigurer::disable)</span><br><span class="line">                <span class="comment">// 自定义异常处理</span></span><br><span class="line">                .exceptionHandling(exception -&gt; exception</span><br><span class="line">                        <span class="comment">// 登录异常（请求未认证）处理</span></span><br><span class="line">                        .authenticationEntryPoint(securityResultHandler)</span><br><span class="line">                        <span class="comment">// 无权限访问处理</span></span><br><span class="line">                        .accessDeniedHandler(securityResultHandler)</span><br><span class="line">                )</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现新的登录逻辑，并生成<code>jwt</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> JWTProperties jwtProperties;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> LoginVO <span class="title function_">login</span><span class="params">(String account, String password)</span> &#123;</span><br><span class="line">    <span class="comment">// 验证登录，并存入缓存</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(account, password);</span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 token</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> (User) authentication.getPrincipal();</span><br><span class="line">    <span class="type">var</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">    claims.put(<span class="string">&quot;id&quot;</span>, user.getId());</span><br><span class="line">    claims.put(<span class="string">&quot;username&quot;</span>, user.getUsername());</span><br><span class="line">    <span class="type">var</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtils.createJWT(claims, jwtProperties.getKey(), jwtProperties.getTtl());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装返回数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginVO</span>(user.getId(), user.getUsername(), token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、添加jwt校验拦截"><a href="#三、添加jwt校验拦截" class="headerlink" title="三、添加jwt校验拦截"></a>三、添加jwt校验拦截</h3><ol><li>创建jwt拦截器：</li></ol><blockquote><p>[!CAUTION]</p><p>需要注意的是，为确保权限功能正常运行，将用户信息存入内存时，仍需要获取权限。</p><p>请读者按实际需求配置。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT 拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JWTProperties jwtProperties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RoleService roleService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> HttpServletRequest request,</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> HttpServletResponse response,</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> FilterChain filterChain)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 放行登录接口</span></span><br><span class="line">        <span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">                &amp;&amp; request.getRequestURI().equals(<span class="string">&quot;/login&quot;</span>)) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并校验 token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getHeader());</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;请求头未传递 token&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;请求头未传递 token&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = JWTUtils.parseJWT(token, jwtProperties.getKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 签名无效&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 签名错误&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 算法不一致&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 过期&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;未知 token 拦截错误 &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">var</span> <span class="variable">userId</span> <span class="operator">=</span> ((Number) claims.get(<span class="string">&quot;id&quot;</span>)).longValue();</span><br><span class="line">        <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> (String) claims.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对应角色及权限</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">authorityList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;GrantedAuthority&gt;();</span><br><span class="line">        List&lt;Role&gt; roleList = roleService.getByUserId(userId);</span><br><span class="line">        roleList.forEach(role -&gt; &#123;</span><br><span class="line">            <span class="comment">// 添加角色类型（security 中的【角色】）</span></span><br><span class="line">            authorityList.add(() -&gt; <span class="string">&quot;ROLE_&quot;</span> + role.getType());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取对应角色权限，并添加权限</span></span><br><span class="line">            List&lt;Permission&gt; permissionList = permissionService.getByRoleId(role.getId());</span><br><span class="line">            permissionList.forEach(permission -&gt; authorityList.add(permission::getValue));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存入 SecurityContextHolder 并放行</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, <span class="literal">null</span>, authorityList);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在Config类中注册jwt拦截器：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册 jwt 拦截器</span></span><br><span class="line">http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class)</span><br></pre></td></tr></table></figure><ol start="3"><li>重写 Security 结果处理类：</li></ol><blockquote><p>[!TIP]</p><p>因为弃用了表单登录等一系列功能，结果处理类的部分改造也得以删除。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Security 结果处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityResultHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span>, AccessDeniedHandler &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求未认证处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request       请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response      响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authException 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(</span></span><br><span class="line"><span class="params">            HttpServletRequest request,</span></span><br><span class="line"><span class="params">            HttpServletResponse response,</span></span><br><span class="line"><span class="params">            AuthenticationException authException)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resMsg</span> <span class="operator">=</span> <span class="string">&quot;登录已过期，请重新登录&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (authException <span class="keyword">instanceof</span> BadCredentialsException)</span><br><span class="line">            resMsg = authException.getMessage();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简单构造一个请求未认证的响应结果 json</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(-<span class="number">1</span>, resMsg);</span><br><span class="line">        <span class="type">var</span> <span class="variable">resultJSON</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 json 数据给前端</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">        response.getWriter().println(resultJSON);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无权限访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request               请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response              响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessDeniedException 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(</span></span><br><span class="line"><span class="params">            HttpServletRequest request,</span></span><br><span class="line"><span class="params">            HttpServletResponse response,</span></span><br><span class="line"><span class="params">            AccessDeniedException accessDeniedException)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;用户尝试越权操作：&#123;&#125;&quot;</span>, accessDeniedException.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简单构造一个无权限访问的响应结果 json</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(-<span class="number">1</span>, <span class="string">&quot;该用户无权访问&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">resultJSON</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 json 数据给前端</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">        response.getWriter().println(resultJSON);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，自定义响应式登录配置完毕。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring-Security </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（六）RBAC 结构实现</title>
      <link href="/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>一、<a href="https://blog.amane64.site/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/">引入依赖及原理简述</a><br>二、<a href="https://blog.amane64.site/2025/01/14/Spring-Security%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BB%B4%E6%8A%A4%E9%85%8D%E7%BD%AE/">多用户维护配置</a><br>三、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/">基础自定义配置</a><br>四、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%8A%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%9C%E7%AE%A1%E7%90%86/">前后端分离及登录结果管理</a><br>五、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/">角色权限管理基础</a></p><hr><p>从此处开始，为新的原创内容，相关数据结构代码换了一套新的，与之前的代码关系不大了。<br>建议新建一个项目，将配置文件复制过来，然后按照步骤走。</p><p>六、RBAC 结构实现 &lt;— 你在这里 ( •̀ ω •́ )y<br>七、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E4%B8%83%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%BC%8F%E7%99%BB%E5%BD%95%E4%B8%8E%20JWT%20%E9%85%8D%E7%BD%AE/">自定义响应式登录与 JWT 配置</a><br>八、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E6%88%90%20Redis/">集成 Redis</a></p></blockquote><h2 id="Spring-Security（六）RBAC-结构实现"><a href="#Spring-Security（六）RBAC-结构实现" class="headerlink" title="Spring Security（六）RBAC 结构实现"></a>Spring Security（六）RBAC 结构实现</h2><blockquote><p>博主前言：本以为这个就是代替传统 jwt 的插件，没想到复杂程度如此之高。Spring Security 本身是个高度自定义化的组件，必须花时间重点学习一下。以下为个人配置学习的流程，从零到权限管理、redis嵌入等步骤。<br>本文基于尚硅谷的 Spring Security 教程学习，文章与原教程有不小出入，仅供参考。<br>B站视频链接：<a href="https://www.bilibili.com/video/BV14b4y1A7Wz">尚硅谷Java项目SpringSecurity+OAuth2权限管理实战教程</a></p></blockquote><p>RBAC（用户 - 角色 - 权限 - 资源）是目前广泛应用的权限结构，该结构能够动态管理权限，一般为三个对象模型和两个链接模型：</p><p><img src="/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/RBAC_%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="RBAC_结构图"></p><p>如图，用户可以有多个角色身份，角色可以被分配多种权限。</p><p>接下来我们要实现这个结构。</p><blockquote><p>[!WARNING]</p><p>特殊注意，此角色非彼角色：</p><p>虽然我们设计了【角色】这个模型，但是在代码层面上，【角色】与代码的耦合度非常高——管理端和用户端的授权注解都是硬编码。</p><p>实际上，【角色】表为权限的打包集合，用于为用户分配权限及划分类别。</p><p>所以，若为单端系统，代码层面无需配置角色；若为双端乃至多端系统，代码层面每一端配置一个角色。</p></blockquote><hr><h3 id="一、数据表实现"><a href="#一、数据表实现" class="headerlink" title="一、数据表实现"></a>一、数据表实现</h3><p>一共五个表，三个主表两个链接表。</p><ol><li>用户表<code>user</code></li></ol><table><thead><tr><th align="center">列名</th><th align="center">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int</td><td align="center">用户ID</td></tr><tr><td align="center">username</td><td align="center">varchar</td><td align="center">用户名</td></tr><tr><td align="center">password</td><td align="center">varchar</td><td align="center">密码</td></tr><tr><td align="center">status</td><td align="center">tinyint</td><td align="center">状态（启用&#x2F;禁用）</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr></tbody></table><ol start="2"><li>角色表<code>role</code></li></ol><table><thead><tr><th align="center">列名</th><th align="center">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int</td><td align="center">角色ID</td></tr><tr><td align="center">name</td><td align="center">varchar</td><td align="center">角色名称</td></tr><tr><td align="center">type</td><td align="center">varchar</td><td align="center">所属角色组</td></tr></tbody></table><ol start="3"><li>用户-角色链接表<code>lk_user_role</code></li></ol><table><thead><tr><th align="center">列名</th><th align="center">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int</td><td align="center">用户角色关联ID</td></tr><tr><td align="center">user_id</td><td align="center">int</td><td align="center">用户ID</td></tr><tr><td align="center">role_id</td><td align="center">int</td><td align="center">角色ID</td></tr></tbody></table><ol start="4"><li>权限表<code>permission</code></li></ol><table><thead><tr><th align="center">列名</th><th align="center">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int</td><td align="center">权限ID</td></tr><tr><td align="center">name</td><td align="center">varchar</td><td align="center">权限名称</td></tr><tr><td align="center">value</td><td align="center">varchar</td><td align="center">权限值</td></tr></tbody></table><ol start="5"><li>角色-权限链接表<code>lk_role_permission</code></li></ol><table><thead><tr><th align="center">列名</th><th align="center">数据类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">int</td><td align="center">用户角色关联ID</td></tr><tr><td align="center">role_id</td><td align="center">int</td><td align="center">角色ID</td></tr><tr><td align="center">permission_id</td><td align="center">int</td><td align="center">权限ID</td></tr></tbody></table><p>建表语句和测试数据：</p><blockquote><p>[!NOTE]</p><p>构建对应的<code>Mybatis-Plus</code>结构这里不再赘述。</p><p>密码均为 password</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,  <span class="comment">-- 用户ID，自增主键</span></span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,      <span class="comment">-- 用户名，非空</span></span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,      <span class="comment">-- 密码，非空</span></span><br><span class="line">    status TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="number">1</span>,         <span class="comment">-- 状态（启用/禁用），默认为1（启用）</span></span><br><span class="line">    <span class="comment">-- 其他列可以根据需求添加</span></span><br><span class="line">    <span class="keyword">UNIQUE</span> (username)                    <span class="comment">-- 用户名唯一</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> role (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,    <span class="comment">-- 角色ID，自增主键</span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,            <span class="comment">-- 角色名称，非空</span></span><br><span class="line">    type <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT NULL</span>         <span class="comment">-- 所属角色组</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户-角色链接表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> lk_user_role (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,   <span class="comment">-- 用户角色关联ID，自增主键</span></span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">NOT NULL</span>,                 <span class="comment">-- 用户ID，外键</span></span><br><span class="line">    role_id <span class="type">INT</span> <span class="keyword">NOT NULL</span>,                 <span class="comment">-- 角色ID，外键</span></span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (user_id) <span class="keyword">REFERENCES</span> <span class="keyword">user</span>(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE,   <span class="comment">-- 外键约束，删除用户时级联删除</span></span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (role_id) <span class="keyword">REFERENCES</span> role(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE    <span class="comment">-- 外键约束，删除角色时级联删除</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> permission (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,   <span class="comment">-- 权限ID，自增主键</span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,           <span class="comment">-- 权限名称，非空</span></span><br><span class="line">    <span class="keyword">value</span> <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT NULL</span>             <span class="comment">-- 权限描述</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 角色-权限链接表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> lk_role_permission (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,   <span class="comment">-- 用户角色关联ID，自增主键</span></span><br><span class="line">    role_id <span class="type">INT</span> <span class="keyword">NOT NULL</span>,                 <span class="comment">-- 角色ID，外键</span></span><br><span class="line">    permission_id <span class="type">INT</span> <span class="keyword">NOT NULL</span>,           <span class="comment">-- 权限ID，外键</span></span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (role_id) <span class="keyword">REFERENCES</span> role(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE,   <span class="comment">-- 外键约束，删除角色时级联删除</span></span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (permission_id) <span class="keyword">REFERENCES</span> permission(id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE  <span class="comment">-- 外键约束，删除权限时级联删除</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试数据</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `lk_role_permission` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `lk_role_permission` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `lk_role_permission` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `lk_user_role` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `lk_user_role` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `permission` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;查询用户列表&#x27;</span>, <span class="string">&#x27;user_list&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `permission` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;查询自己&#x27;</span>, <span class="string">&#x27;user_myself&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;管理员&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;普通用户&#x27;</span>, <span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="二、重写对应逻辑"><a href="#二、重写对应逻辑" class="headerlink" title="二、重写对应逻辑"></a>二、重写对应逻辑</h3><p> 重写<code>User</code>结构，适配<code>UserDetails</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDetails.<span class="built_in">super</span>.isAccountNonExpired();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDetails.<span class="built_in">super</span>.isAccountNonLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDetails.<span class="built_in">super</span>.isCredentialsNonExpired();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写<code>UserDetailService</code>中的用户维护校验方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RoleService roleService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 获取用户</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> getByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在：&quot;</span> + username);</span><br><span class="line">        <span class="type">var</span> <span class="variable">authorityList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;GrantedAuthority&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对应角色</span></span><br><span class="line">        List&lt;Role&gt; roleList = roleService.getByUserId(user.getId());</span><br><span class="line">        roleList.forEach(role -&gt; &#123;</span><br><span class="line">            <span class="comment">// 添加角色类型（security 中的【角色】）</span></span><br><span class="line">            authorityList.add(() -&gt; <span class="string">&quot;ROLE_&quot;</span> + role.getType());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取对应角色权限，并添加权限</span></span><br><span class="line">            List&lt;Permission&gt; permissionList = permissionService.getByRoleId(role.getId());</span><br><span class="line">            permissionList.forEach(permission -&gt; authorityList.add(permission::getValue));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置权限并返回</span></span><br><span class="line">        user.setAuthorities(authorityList);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">getByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .eq(User::getUsername, username));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的链接键查找方法：</p><blockquote><p>[!NOTE]</p><p>读者可以参考这篇文章来更好的配置链接键：<a href="https://blog.amane64.site/2025/01/26/%E4%BB%A3%E7%A0%81%E5%B1%82%E5%A4%9A%E5%AF%B9%E5%A4%9A%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%9A%E7%94%A8%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/">代码层多对多结构的通用处理</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RoleMapper, Role&gt; <span class="keyword">implements</span> <span class="title class_">RoleService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LkUserRoleService lkUserRoleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">getByUserId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取的所有链接键</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">lkLQW</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;LkUserRole&gt;()</span><br><span class="line">                .eq(LkUserRole::getUserId, id);</span><br><span class="line">        <span class="type">var</span> <span class="variable">lkList</span> <span class="operator">=</span> lkUserRoleService.list(lkLQW);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归查找角色</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">resList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Role&gt;();</span><br><span class="line">        lkList.forEach(lk -&gt; resList.add(<span class="built_in">this</span>.getById(lk.getRoleId())));</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PermissionMapper, Permission&gt; <span class="keyword">implements</span> <span class="title class_">PermissionService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LkRolePermissionService lkPermissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Permission&gt; <span class="title function_">getByRoleId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取所有连接键</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">lkLQW</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;LkRolePermission&gt;()</span><br><span class="line">                .eq(LkRolePermission::getRoleId, id);</span><br><span class="line">        <span class="type">var</span> <span class="variable">lkList</span> <span class="operator">=</span> lkPermissionService.list(lkLQW);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归查找权限</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">resList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Permission&gt;();</span><br><span class="line">        lkList.forEach(lk -&gt; resList.add(<span class="built_in">this</span>.getById(lk.getPermissionId())));</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、测试多端权限"><a href="#三、测试多端权限" class="headerlink" title="三、测试多端权限"></a>三、测试多端权限</h3><p>配置<code>Config</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对来自 http/https 的请求的授权保护方法</span></span><br><span class="line">http.authorizeHttpRequests(authorize -&gt; authorize</span><br><span class="line">        <span class="comment">// 配置不同终端访问权限</span></span><br><span class="line">        .requestMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        .requestMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRole(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        <span class="comment">// 对所有请求均做授权保护，已认证的会自动授权</span></span><br><span class="line">        .anyRequest().authenticated())</span><br></pre></td></tr></table></figure><p>编写用户列表接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;User&gt;&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.list());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录并访问，发现仅<code>user</code>可以获取列表，<code>admin</code>无权限。</p><hr><h3 id="四、测试接口权限"><a href="#四、测试接口权限" class="headerlink" title="四、测试接口权限"></a>四、测试接口权限</h3><p>配置Config类：</p><ul><li>添加@EnableMethodSecurity注解</li><li>注释【配置不同终端访问权限】</li></ul><p>修改接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;user_list&#x27;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;User&gt;&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.list());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次登录并访问，这一次仅<code>admin</code>可以获取列表，<code>user</code>无权限。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring-Security </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（五）角色权限管理基础</title>
      <link href="/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>一、<a href="https://blog.amane64.site/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/">引入依赖及原理简述</a><br>二、<a href="https://blog.amane64.site/2025/01/14/Spring-Security%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BB%B4%E6%8A%A4%E9%85%8D%E7%BD%AE/">多用户维护配置</a><br>三、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/">基础自定义配置</a><br>四、<a href="(https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%8A%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%9C%E7%AE%A1%E7%90%86/)">前后端分离及登录结果管理</a><br>五、角色权限管理基础 &lt;— 你在这里 ( •̀ ω •́ )y</p><hr><p>从此处开始，为新的原创内容，相关数据结构代码换了一套新的，与之前的代码关系不大了。<br>建议新建一个项目，将配置文件复制过来，然后按照步骤走。</p><p>六、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/">RBAC 结构实现</a><br>七、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E4%B8%83%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%BC%8F%E7%99%BB%E5%BD%95%E4%B8%8E%20JWT%20%E9%85%8D%E7%BD%AE/">自定义响应式登录与 JWT 配置</a><br>八、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E6%88%90%20Redis/">集成 Redis</a></p></blockquote><h2 id="Spring-Security（五）角色权限管理基础"><a href="#Spring-Security（五）角色权限管理基础" class="headerlink" title="Spring-Security（五）角色权限管理基础"></a>Spring-Security（五）角色权限管理基础</h2><blockquote><p>博主前言：本以为这个就是代替传统 jwt 的插件，没想到复杂程度如此之高。Spring Security 本身是个高度自定义化的组件，必须花时间重点学习一下。以下为个人配置学习的流程，从零到权限管理、redis嵌入等步骤。<br>本文基于尚硅谷的 Spring Security 教程学习，文章与原教程有不小出入，仅供参考。<br>B站视频链接：<a href="https://www.bilibili.com/video/BV14b4y1A7Wz">尚硅谷Java项目SpringSecurity+OAuth2权限管理实战教程</a></p></blockquote><p>现阶段的项目，一般都包含管理端和用户端，管理端部分功能用户端是不能使用的，所以我们需要一套权限系统来实现。</p><blockquote><p>回想起之前写提瓦特外卖的时光了，那时候也是双端，管理端和用户端。</p></blockquote><hr><h3 id="一、权限简介及修改逻辑结构"><a href="#一、权限简介及修改逻辑结构" class="headerlink" title="一、权限简介及修改逻辑结构"></a>一、权限简介及修改逻辑结构</h3><p>授权管理的实现在 Spring Security 中非常灵活，可以帮助应用程序实现以下两种常见的授权需求：</p><ul><li>用户 - 权限 - 资源：例如张三的权限是添加用户、查看用户列表，李四的权限是查看用户列表</li><li>用户 - 角色 - 资源：例如 张三是角色是管理员、李四的角色是普通用户，管理员能做所有操作，普通用户只能查看信息</li></ul><p>对于用户，我们需要为其添加权限字段，供 Spring Security 来判断，每个用户可以拥有多个字段，对应多个权限。</p><p>我们先来改造一下<code>User</code>类，要求添加数据库排除的权限字段及重写对应接口方法：</p><blockquote><p>实际上，该字段应该在数据库中体现，有些结构还配置有权限表进行一对多或多对多的链接。<br>此处为演示，简单写个字段，数据库中没有，需要被排除。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">    <span class="keyword">return</span> authorities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，我们重写用户信息维护服务中的装载用户方法，就可以为其写死一个权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> getByUsername(username);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在：&quot;</span> + username);</span><br><span class="line">    <span class="type">var</span> <span class="variable">authorityList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;GrantedAuthority&gt;();</span><br><span class="line">    <span class="comment">// 这里以【用户 - 权限 - 资源】为例</span></span><br><span class="line">    authorityList.add(() -&gt; <span class="string">&quot;USER_LIST&quot;</span>);</span><br><span class="line">    <span class="comment">// 没有添加 USER_ADD 权限，为接下来的操作做区分</span></span><br><span class="line">    user.setAuthorities(authorityList);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二、配置自定义无权限返回数据"><a href="#二、配置自定义无权限返回数据" class="headerlink" title="二、配置自定义无权限返回数据"></a>二、配置自定义无权限返回数据</h3><p>首先让<code>SecurityResultHandler</code>继承<code>AccessDeniedHandler</code>接口，然后实现对应方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无权限访问</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request               请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response              响应</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> accessDeniedException 异常信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response,</span></span><br><span class="line"><span class="params">        AccessDeniedException accessDeniedException)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 简单构造一个无权限访问的响应结果 json</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(-<span class="number">1</span>, <span class="string">&quot;该用户无权访问&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">resultJSON</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 json 数据给前端</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">    response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">    response.getWriter().println(resultJSON);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在Config类中配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义异常处理</span></span><br><span class="line">http.exceptionHandling(exception -&gt; exception</span><br><span class="line">        <span class="comment">// 登录异常（请求未认证）处理</span></span><br><span class="line">        .authenticationEntryPoint(securityResultHandler)</span><br><span class="line">        <span class="comment">// 无权限访问处理</span></span><br><span class="line">        .accessDeniedHandler(securityResultHandler)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h3 id="三、基于请求的权限分配"><a href="#三、基于请求的权限分配" class="headerlink" title="三、基于请求的权限分配"></a>三、基于请求的权限分配</h3><blockquote><p>实际开发中，我们可以定义两层结构：权限一层，权限包含的资源是另一层。通过不同的权限分配不同的资源，适用于功能较多逻辑较复杂的情形（例如各大云服务器平台）。</p></blockquote><ol><li><p>用户 - 权限 - 资源</p><p>假定目前有以下需求：</p><ul><li>具有<code>USER_LIST</code>权限的用户可以访问 &#x2F;user&#x2F;list 接口</li><li>具有<code>USER_ADD</code>权限的用户可以访问 &#x2F;user&#x2F;add 接口</li></ul><p><code>Config</code>类中配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对来自 http/https 的请求的授权保护方法</span></span><br><span class="line">http.authorizeHttpRequests(authorize -&gt; authorize</span><br><span class="line">        <span class="comment">// 基于请求的权限配置（用户 - 权限 - 资源）</span></span><br><span class="line">        .requestMatchers(<span class="string">&quot;/user/list&quot;</span>).hasAuthority(<span class="string">&quot;USER_LIST&quot;</span>)</span><br><span class="line">        .requestMatchers(<span class="string">&quot;/user/add&quot;</span>).hasAuthority(<span class="string">&quot;USER_ADD&quot;</span>)</span><br><span class="line">        <span class="comment">// 对所有请求均做授权保护，已认证的会自动授权</span></span><br><span class="line">        .anyRequest().authenticated())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重写用户信息维护服务中的装载用户方法，按照【一、权限简介及修改逻辑结构】中的方式重写并写死一个权限。</p><p>此时登录账户并操作，我们会发现查询用户列表正常拿到数据，但尝试添加用户则返回自定义的403结果。</p><p><img src="/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8%E7%BB%93%E6%9E%9C1.png" alt="查询用户列表结果1"></p><p><img src="/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E7%BB%93%E6%9E%9C.png" alt="添加用户结果"></p></li><li><p>用户 - 角色 - 资源</p><p>假定目前有以下需求：</p><ul><li>具有<code>ADMIN</code>权限的用户可以访问 &#x2F;admin 下的所有接口</li><li>具有<code>USER</code>权限的用户可以访问 &#x2F;user 下的所有接口</li></ul><p><code>Config</code>类中配置（注释掉上面配置的代码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对来自 http/https 的请求的授权保护方法</span></span><br><span class="line">http.authorizeHttpRequests(authorize -&gt; authorize</span><br><span class="line">  <span class="comment">// 基于请求的权限配置（用户 - 角色 - 资源）</span></span><br><span class="line">  .requestMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">  .requestMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">         <span class="comment">// 对所有请求均做授权保护，已认证的会自动授权</span></span><br><span class="line">         .anyRequest().authenticated())</span><br></pre></td></tr></table></figure><p>重写用户信息维护服务中的装载用户方法：</p><p>自定义一个AdminController并写一个测试接口：</p><p>此时登录账户并操作，我们会发现查询用户列表正常拿到数据，但尝试访问测试接口则返回自定义的403结果。</p><p><img src="/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8%E7%BB%93%E6%9E%9C2.png" alt="查询用户列表结果2"></p><p><img src="/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95%E6%8E%A5%E5%8F%A3%E7%BB%93%E6%9E%9C.png" alt="访问测试接口结果"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring-Security </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（四）前后端分离及登录结果管理</title>
      <link href="/2025/01/15/Spring-Security%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%8A%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%9C%E7%AE%A1%E7%90%86/"/>
      <url>/2025/01/15/Spring-Security%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%8A%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%9C%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目录<br>一、<a href="https://blog.amane64.site/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/">引入依赖及原理简述</a><br>二、<a href="https://blog.amane64.site/2025/01/14/Spring-Security%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BB%B4%E6%8A%A4%E9%85%8D%E7%BD%AE/">多用户维护配置</a><br>三、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/">基础自定义配置</a><br>四、前后端分离及登录结果管理  &lt;— 你在这里 ( •̀ ω •́ )y</p><blockquote><p>五、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/">角色权限管理基础</a></p></blockquote><hr><p>从此处开始，为新的原创内容，相关数据结构代码换了一套新的，与之前的代码关系不大了。<br>建议新建一个项目，将配置文件复制过来，然后按照步骤走。</p><p>六、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/">RBAC 结构实现</a><br>七、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E4%B8%83%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%BC%8F%E7%99%BB%E5%BD%95%E4%B8%8E%20JWT%20%E9%85%8D%E7%BD%AE/">自定义响应式登录与 JWT 配置</a><br>八、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E6%88%90%20Redis/">集成 Redis</a></p></blockquote><h2 id="Spring-Security（四）前后端分离及登录结果管理"><a href="#Spring-Security（四）前后端分离及登录结果管理" class="headerlink" title="Spring Security（四）前后端分离及登录结果管理"></a>Spring Security（四）前后端分离及登录结果管理</h2><blockquote><p>博主前言：本以为这个就是代替传统 jwt 的插件，没想到复杂程度如此之高。Spring Security 本身是个高度自定义化的组件，必须花时间重点学习一下。以下为个人配置学习的流程，从零到权限管理、redis嵌入等步骤。<br>本文基于尚硅谷的 Spring Security 教程学习，文章与原教程有不小出入，仅供参考。<br>B站视频链接：<a href="https://www.bilibili.com/video/BV14b4y1A7Wz">尚硅谷Java项目SpringSecurity+OAuth2权限管理实战教程</a></p></blockquote><p>现在的项目基本上都是前后端分离（包括我个人的一些开源项目），前后端分离的项目，后端验证后要向前端返回<code>json</code>数据，而不是跳转链接，所以要另行配置。</p><blockquote><p>本文使用 fastjson 来处理序列化问题，读者亦可使用其他的方式处理，本文仅作参考。</p></blockquote><h3 id="一、定义并整合登录结果管理器"><a href="#一、定义并整合登录结果管理器" class="headerlink" title="一、定义并整合登录结果管理器"></a>一、定义并整合登录结果管理器</h3><p>​ 这个东西实际上可以当作<code>LoginController</code> + <code>LoginExceptionHandler</code>等控制类。</p><p>​ 我通常不习惯手写返回体，习惯定义主返回体结构，再往里面放数据，这是我定义的通用返回结果类：</p><blockquote><p>我使用的返回体为黑马的几个实战项目常用的返回体，并稍加改造。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回结果类，服务端响应的数据最终都会封装成此对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  回调类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功回调数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.data = data;</span><br><span class="line">        result.msg = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        result.code = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功回调（无数据）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.data = <span class="literal">null</span>;</span><br><span class="line">        result.msg = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        result.code = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 空回调类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 空回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.code = code;</span><br><span class="line">        result.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 对于登录结果管理，我们要实现五件事：</p><ol><li>登录成功之后，处理返回<code>json</code>数据</li><li>登录失败之后，处理返回<code>json</code>数据 * 2</li><li>注销成功之后，处理返回<code>json</code>数据 * 3</li><li>请求未认证后，处理返回<code>json</code>数据 * 4</li><li>会话并发处理，处理返回<code>json</code>数据 * 5</li></ol><blockquote><p>╮(╯▽╰)╭ 五次啊五次 ╮(╯▽╰)╭</p><p>会话并发处理：简单来讲就是后登录的账号会使先登录的账号失效</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录结果处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span>, AuthenticationFailureHandler, LogoutSuccessHandler, AuthenticationEntryPoint, SessionInformationExpiredStrategy &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录成功处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request        请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response       响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 认证信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response,</span></span><br><span class="line"><span class="params">        Authentication authentication)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 可以在这里生成 token</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">resultToken</span> <span class="operator">=</span> <span class="string">&quot;登录成功！这是登录后的 token 数据...&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简单构造一个登录成功的响应结果 json</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Result.success(resultToken);</span><br><span class="line">        <span class="type">var</span> <span class="variable">resultJSON</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 json 数据给前端</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(resultJSON);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录失败处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request   请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response  响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response,</span></span><br><span class="line"><span class="params">        AuthenticationException exception)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 简单构造一个登录失败的响应结果 json</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(-<span class="number">1</span>, exception.getLocalizedMessage());</span><br><span class="line">        <span class="type">var</span> <span class="variable">resultJSON</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 json 数据给前端</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">        response.getWriter().println(resultJSON);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销成功处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request        请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response       响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 认证信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response,</span></span><br><span class="line"><span class="params">        Authentication authentication)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 简单构造一个注销成功的响应结果 json</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">resultData</span> <span class="operator">=</span> <span class="string">&quot;注销成功！这是注销后的数据...&quot;</span>;</span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Result.success(resultData);</span><br><span class="line">        <span class="type">var</span> <span class="variable">resultJSON</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 json 数据给前端</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(resultJSON);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求未认证处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request       请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response      响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authException 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest request,</span></span><br><span class="line"><span class="params">        HttpServletResponse response,</span></span><br><span class="line"><span class="params">        AuthenticationException authException)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 简单构造一个请求未认证的响应结果 json</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(-<span class="number">1</span>, <span class="string">&quot;登录已过期，请重新登录&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">resultJSON</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 json 数据给前端</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">        response.getWriter().println(resultJSON);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话并发处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 会话信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onExpiredSessionDetected</span><span class="params">(SessionInformationExpiredEvent event)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 简单构造一个账号登录数量已满的响应结果 json</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> Result.error(-<span class="number">1</span>, <span class="string">&quot;该账号已从其他设备登录&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">resultJSON</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 json 数据给前端</span></span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> event.getResponse();</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.setStatus(HttpServletResponse.SC_CONFLICT);</span><br><span class="line">        response.getWriter().println(resultJSON);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 在这之后还没完，要在<code>Config</code>类中配置好，不然是不会生效的。</p><blockquote><p>因为是前后端分离，不要忘了跨域问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准许跨域访问</span></span><br><span class="line">.cors(Customizer.withDefaults())</span><br><span class="line"><span class="comment">// 使用表单授权方式登录</span></span><br><span class="line">.formLogin(form -&gt; &#123;</span><br><span class="line">    <span class="comment">// 指定自定义登录页的 url，并放行相关 url</span></span><br><span class="line">    form.loginPage(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 设置登录成功处理器</span></span><br><span class="line">        .successHandler(<span class="keyword">new</span> <span class="title class_">AuthenticationHandler</span>())</span><br><span class="line">        <span class="comment">// 设置登录失败处理器</span></span><br><span class="line">        .failureHandler(<span class="keyword">new</span> <span class="title class_">AuthenticationHandler</span>());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 登出配置</span></span><br><span class="line">.logout(logout -&gt; logout.logoutSuccessHandler(<span class="keyword">new</span> <span class="title class_">AuthenticationHandler</span>()))</span><br><span class="line"><span class="comment">// 登录异常（请求未认证）处理</span></span><br><span class="line">.exceptionHandling(exception -&gt; exception.authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">AuthenticationHandler</span>()));</span><br><span class="line"><span class="comment">// 会话并发处理</span></span><br><span class="line">.sessionManagement(session -&gt; &#123;</span><br><span class="line"> <span class="comment">// 最多同时登录的账号数量</span></span><br><span class="line">    session.maximumSessions(<span class="number">1</span>)</span><br><span class="line">     .expiredSessionStrategy(<span class="keyword">new</span> <span class="title class_">AuthenticationHandler</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="二、用户认证信息分析"><a href="#二、用户认证信息分析" class="headerlink" title="二、用户认证信息分析"></a>二、用户认证信息分析</h3><p>​ 上述登录结果管理器代码中，我们可以调用<code>Authentication</code>中的各项数据，其中的名称貌似跟用户没什么关系，它们实际上是 Spring Security 的一套新的概念。</p><p>​ 在 Spring Security 框架中，<code>SecurityContextHolder</code>、<code>SecurityContext</code>、<code>Authentication</code>、<code>Principal</code>和<code>Credential</code>是一些与身份验证和授权相关的重要概念。它们之间的关系如下：</p><ol><li><code>SecurityContextHolder</code>：<code>SecurityContextHolder</code>是 Spring Security 存储已认证用户详细信息的地方。</li><li><code>SecurityContext</code>：<code>SecurityContext</code>是从<code>SecurityContextHolder</code>获取的内容，包含当前已认证用户的<code>Authentication</code>信息。</li><li><code>Authentication</code>：<code>Authentication</code>表示用户的身份认证信息。它包含了用户的<code>Principal</code>、<code>Credential</code>和<code>Authority</code>信息。</li><li><code>Principal</code>：表示用户的身份标识。它通常是一个表示用户的实体对象，例如用户名。<code>Principal</code>可以通过<code>Authentication</code>对象的<code>getPrincipal()</code>方法获取。</li><li><code>Credentials</code>：表示用户的凭证信息，例如密码、证书或其他认证凭据。<code>Credential</code>可以通过<code>Authentication</code>对象的<code>getCredentials()</code>方法获取。</li><li><code>GrantedAuthority</code>：表示用户被授予的权限</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring-Security </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（三）基础自定义配置</title>
      <link href="/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目录<br>一、<a href="https://blog.amane64.site/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/">引入依赖及原理简述</a><br>二、<a href="https://blog.amane64.site/2025/01/14/Spring-Security%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BB%B4%E6%8A%A4%E9%85%8D%E7%BD%AE/">多用户维护配置</a><br>三、基础自定义配置    &lt;— 你在这里 ( •̀ ω •́ )y<br>四、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%8A%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%9C%E7%AE%A1%E7%90%86/">前后端分离及登录结果管理</a><br>五、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/">角色权限管理基础</a></p><hr><p>从此处开始，为新的原创内容，相关数据结构代码换了一套新的，与之前的代码关系不大了。<br>建议新建一个项目，将配置文件复制过来，然后按照步骤走。</p><p>六、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/">RBAC 结构实现</a><br>七、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E4%B8%83%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%BC%8F%E7%99%BB%E5%BD%95%E4%B8%8E%20JWT%20%E9%85%8D%E7%BD%AE/">自定义响应式登录与 JWT 配置</a><br>八、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E6%88%90%20Redis/">集成 Redis</a></p></blockquote><h2 id="Spring-Security（三）基础自定义配置"><a href="#Spring-Security（三）基础自定义配置" class="headerlink" title="Spring Security（三）基础自定义配置"></a>Spring Security（三）基础自定义配置</h2><blockquote><p>博主前言：本以为这个就是代替传统 jwt 的插件，没想到复杂程度如此之高。Spring Security 本身是个高度自定义化的组件，必须花时间重点学习一下。以下为个人配置学习的流程，从零到权限管理、redis嵌入等步骤。<br>本文基于尚硅谷的 Spring Security 教程学习，文章与原教程有不小出入，仅供参考。<br>B站视频链接：<a href="https://www.bilibili.com/video/BV14b4y1A7Wz">尚硅谷Java项目SpringSecurity+OAuth2权限管理实战教程</a></p></blockquote><p>​接下来说说 Spring Security 的各项基础配置。</p><hr><h3 id="一、过滤器链相关配置"><a href="#一、过滤器链相关配置" class="headerlink" title="一、过滤器链相关配置"></a>一、过滤器链相关配置</h3><ol><li>过滤器链的配置代码</li></ol><p>​ 在<code>Config</code>类中创建过滤器链<code>Bean</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Spring Security 过滤器链配置</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> http 请求体</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 过滤器链</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception 抛出异常</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">        <span class="comment">// 对来自 http/https 的请求的授权保护方法</span></span><br><span class="line">        .authorizeHttpRequests(authorize -&gt; &#123;</span><br><span class="line">            <span class="comment">// 对所有请求均做授权保护，已认证的会自动授权</span></span><br><span class="line">            authorize.anyRequest().authenticated();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 使用基本授权方式（弹出一个 dialog 窗口）</span></span><br><span class="line">        <span class="comment">//                .httpBasic(Customizer.withDefaults())</span></span><br><span class="line">        <span class="comment">// 使用网页表单授权方式（生成默认登录登出页面）</span></span><br><span class="line">        .formLogin(Customizer.withDefaults());</span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>CSRF（跨站请求伪造）攻击</li></ol><p>​ <a href="https://juejin.cn/post/7008171429845811207">CSRF跨站请求伪造详解（稀土掘金）</a></p><blockquote><p>简单来说，就是你登录正常网站，获得了其安全凭证，然后访问了一个恶意网站，恶意网站就能借着你已获得的安全凭证偷偷地访问正常网站来干坏事。</p><p>换个角度来讲，正常网站仅仅是将安全凭证发给了你的“浏览器”，至于是你还是恶意网站使用，正常网站并不知道。</p></blockquote><p>​ Spring Security 的过滤器链中自带<code>CSRF</code>的处理方法。但在开发过程中，我们往往会使用第三方 API 管理工具来调试程序（swagger、postman、apifox等），<strong>这些工具在<code>CSRF</code>流程中扮演攻击者的角色</strong>，所以会被 Spring Security 拦截，我们得手动关掉<code>CSRF</code>的处理方法。</p><blockquote><p>不要忘记在项目上线时重新开启！！！！！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关掉 csrf 用于本地调试（务必在项目正式上线时开启！！！）</span></span><br><span class="line">http.csrf(AbstractHttpConfigurer::disable)</span><br></pre></td></tr></table></figure><ol start="3"><li>前后端不分离，自定义登录页</li></ol><p>​ 只需修改过滤器链相关配置即可，注意需要对相关<code>url</code>进行放行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用网页表单授权方式</span></span><br><span class="line">http.formLogin(form -&gt; &#123;</span><br><span class="line">    <span class="comment">// 指定自定义登录页的 url，并放行相关 url</span></span><br><span class="line">    form.loginPage(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">// 定义登录错误 url</span></span><br><span class="line">        .failureUrl(<span class="string">&quot;/login?error&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="二、密码加密算法"><a href="#二、密码加密算法" class="headerlink" title="二、密码加密算法"></a>二、密码加密算法</h3><blockquote><p>这里仅讲解为什么要密码加密及为什么要配置加密方法</p></blockquote><p>​ 对于用户的密码，我们不能明文存储，一旦数据泄露，那天都塌了，所以我们得对密码加密，然后再存入数据库。</p><p>​ 对于加密算法也有更高的要求：<strong>必须是单向加密</strong>，即只能加密，不能解密。若要比较密码是否相符，只需将输入值加密，再将加密的输入值与加密的密码进行比较即可，这个流程不会泄露密码明文。</p><p>​ 加密工具使用例：</p><blockquote><p>实际上，Spring Security 支持很多加密工具，但我测试了一大堆，不是被标记已弃用，就是要引入额外依赖。<code>BCryptPasswordEncoder</code>是目前 Spring Security 自带并推荐使用的加密工具。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">passwordEncodersTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">passwordSource</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BCrypt 加密工具</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">bcryptEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;bcrypt: &quot;</span> + bcryptEncoder.encode(passwordSource));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 我们发现，上述使用例的的加密工具并不是静态方法，原因是此类加密算法的原理是动态函数，会根据计算机的性能来动态适应，避免被暴力破解。<code>BCryptPasswordEncoder</code>可以接受一个参数，用来定义解析所需的时间，所以我们不仅不能静态使用，还要为其定义<code>Bean</code>，确保我们使用的与 Spring Security 配置的加密工具是同一个，避免差异带来的错误。</p><blockquote><p><code>BCryptPasswordEncoder</code>的这个参数最小<code>4</code>，最大<code>31</code>，默认<code>10</code>，值越大解析耗时越长。</p><p>Spring Security 推荐解析时间为<code>1s</code>（即默认值）。</p></blockquote><p>​ 在<code>Config</code>类中定义<code>Bean</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定密码加密器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> BCrypt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 在用户服务层类中实现新增用户接口，并使用加密工具</p><blockquote><p>注意，指定加密工具后。数据库密码字段的<code>&#123;bcrypt&#125;</code>前缀应去除，因为加密工具已指定，不需要前缀来识别密码的加密类型。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">checkUser</span> <span class="operator">=</span> getByUsername(user.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (checkUser != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">getByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                           .eq(User::getUsername, username));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring-Security </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（二）多用户维护配置</title>
      <link href="/2025/01/14/Spring-Security%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BB%B4%E6%8A%A4%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/01/14/Spring-Security%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BB%B4%E6%8A%A4%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目录<br>一、<a href="https://blog.amane64.site/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/">引入依赖及原理简述</a><br>二、多用户维护配置    &lt;— 你在这里 ( •̀ ω •́ )y<br>三、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/">基础自定义配置</a><br>四、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%8A%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%9C%E7%AE%A1%E7%90%86/">前后端分离及登录结果管理</a><br>五、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/">角色权限管理基础</a></p><hr><p>从此处开始，为新的原创内容，相关数据结构代码换了一套新的，与之前的代码关系不大了。<br>建议新建一个项目，将配置文件复制过来，然后按照步骤走。</p><p>六、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/">RBAC 结构实现</a><br>七、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E4%B8%83%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%BC%8F%E7%99%BB%E5%BD%95%E4%B8%8E%20JWT%20%E9%85%8D%E7%BD%AE/">自定义响应式登录与 JWT 配置</a><br>八、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E6%88%90%20Redis/">集成 Redis</a></p></blockquote><h2 id="Spring-Security（二）多用户维护配置"><a href="#Spring-Security（二）多用户维护配置" class="headerlink" title="Spring Security（二）多用户维护配置"></a>Spring Security（二）多用户维护配置</h2><blockquote><p>博主前言：本以为这个就是代替传统 jwt 的插件，没想到复杂程度如此之高。Spring Security 本身是个高度自定义化的组件，必须花时间重点学习一下。以下为个人配置学习的流程，从零到权限管理、redis嵌入等步骤。<br>本文基于尚硅谷的 Spring Security 教程学习，文章与原教程有不小出入，仅供参考。<br>B站视频链接：<a href="https://www.bilibili.com/video/BV14b4y1A7Wz">尚硅谷Java项目SpringSecurity+OAuth2权限管理实战教程</a></p></blockquote><p>​ 在实际开发需求中，我们不可能只有一个用户需要维护，好在 Spring Security 有一套完整的流程支持这一操作。</p><hr><h3 id="一、基于内存的用户认证"><a href="#一、基于内存的用户认证" class="headerlink" title="一、基于内存的用户认证"></a>一、基于内存的用户认证</h3><ol><li>配置类</li></ol><p>​ 先来见见 Spring Security 的<code>Config</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启 Spring Security 自定义配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上，Spring boot 项目不需要添加<code>@EnableWebSecurity</code>，因为其<code>autoconfig</code>包会默认启用依赖的相关配置。</p></blockquote><ol start="2"><li>基于内存的用户信息管理器</li></ol><p>​ 在<code>Config</code>类内创建基于内存的用户信息管理器<code>Bean</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 基于内存的用户信息管理器</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在内存中创建一个用户认证信息（UserDetails）</span></span><br><span class="line">    <span class="comment">// 该方法可以重复添加用户（用户名不能重复）</span></span><br><span class="line">    manager.createUser(User.withDefaultPasswordEncoder()</span><br><span class="line">            .username(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">            .build());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ <code>UserDetailsService</code>的作用：储存并维护用户认证信息的服务类，其对应的用户认证信息类为<code>UserDetails</code>。</p><p>​ <code>UserDetails</code>的作用：包含用户名、密码、权限等内容。</p><blockquote><p><code>UserDetailsService</code>与<code>UserDetails</code>均为抽象接口，前者为不同的维护方式，后者则根据实际情况具体实现。</p><p>上述代码中的<code>User</code>即为 Spring Security 默认提供的<code>UserDetails</code>实现。</p><p><code>PasswordEncoder</code>为密码的加密编码器，该对象使用默认编码（已弃用），加密编码器可以全局指定 Spring Security 自带的更好的编码器（强哈希<code>BCryptPasswordEncoder()</code>），亦可以自定义。</p></blockquote><p>​ 此时，默认配置失效，因为我们已经重写了<code>UserDetailsService</code>，默认配置不再受理。</p><hr><h3 id="二、基于数据库的数据源的用户认证"><a href="#二、基于数据库的数据源的用户认证" class="headerlink" title="二、基于数据库的数据源的用户认证"></a>二、基于数据库的数据源的用户认证</h3><blockquote><p>接下来的 SQL 部分基于 Mysql 和 Mybatis-Plus，使用了 Lombok 辅助对象编写，相关依赖及功能这里不再赘述。</p><p>Mybatis-Plus 是 Mybatis 的扩展，不对原生 Mybatis 有影响。</p></blockquote><ol><li>创建数据表</li></ol><blockquote><p>表创建好之后，记得随便放进去一些测试数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_0900_as_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">COLLATE</span> utf8mb4_0900_as_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `enable` tinyint <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `user_username_unidex` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_as_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入测试数据（密码是 &quot;password&quot;）</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `<span class="keyword">user</span>` ( `id`, `username`, `password`, `enabled`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;&#123;bcrypt&#125;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#x27;</span>, <span class="literal">TRUE</span>),</span><br><span class="line">(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Helen&#x27;</span>, <span class="string">&#x27;&#123;bcrypt&#125;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#x27;</span>, <span class="literal">TRUE</span>),</span><br><span class="line">(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;&#123;bcrypt&#125;$2a$10$GRLdNijSQMUvl/au9ofL.eDwmoohzzS7.rmNSJZ.0FxO/BTk76klW&#x27;</span>, <span class="literal">TRUE</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>准备对应数据类、持久层类、服务层类和控制层类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户数据类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Boolean enable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户持久层类</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户服务层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户服务层类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户控制层类</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>自定义<code>UserDetailsService</code></li></ol><p>​ 基于内存的用户认证中，我们已经了解到<code>UserDetailsService</code>是维护用户认证的服务类。在基于内存的方式，有 Spring Security 提供的封装类，我们可以通过<code>Bean</code>注入来装配。但数据表的结构复杂多变，对于基于数据库的数据认证，我们需要自己编写一个<code>UserDetailsService</code>类来适配我们的数据表。</p><blockquote><p>别忘了注释掉<code>SecurityConfig</code>中基于内存的用户信息管理器<code>Bean</code></p></blockquote><p>​ 对于我自己来说，我的做法更加大胆：将用户服务层接口继承<code>UserDetailsService</code>。原本用户逻辑的维护就是用户服务类的任务之一，将<code>UserDetailsService</code>重新整合回用户服务在设计上没有问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改造后的用户服务层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt;, UserDetailsService &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改造后的用户服务层类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">userLQW</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .eq(User::getUsername, username);</span><br><span class="line">        <span class="type">var</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.getOne(userLQW);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在：&quot;</span> + username);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 同时，我们需要注意一件事：<code>UserDetailsService</code>管理的是<code>UserDetails</code>，而非我们自定义的<code>User</code>对象。所以，我们要将<code>User</code>继承<code>UserDetails</code>接口，从而交给<code>UserDetailsService</code>管理（经过上面的操作，实际管理的是用户服务层接口）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改造后的 User</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Boolean enable;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="comment">// 没有权限设定，返回空列表</span></span><br><span class="line">        <span class="keyword">return</span> List.of();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDetails.<span class="built_in">super</span>.isAccountNonExpired();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDetails.<span class="built_in">super</span>.isAccountNonLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDetails.<span class="built_in">super</span>.isCredentialsNonExpired();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 至此，基于数据库的数据源的用户认证配置完成。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring-Security </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security（一）引入依赖及原理简述</title>
      <link href="/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/"/>
      <url>/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目录<br>一、引入依赖及原理简述  &lt;— 你在这里 ( •̀ ω •́ )y<br>二、<a href="https://blog.amane64.site/2025/01/14/Spring-Security%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BB%B4%E6%8A%A4%E9%85%8D%E7%BD%AE/">多用户维护配置</a><br>三、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E7%A1%80%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/">基础自定义配置</a><br>四、<a href="https://blog.amane64.site/2025/01/15/Spring-Security%EF%BC%88%E5%9B%9B%EF%BC%89%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%8F%8A%E7%99%BB%E5%BD%95%E7%BB%93%E6%9E%9C%E7%AE%A1%E7%90%86/">前后端分离及登录结果管理</a><br>五、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E4%BA%94%EF%BC%89%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80/">角色权限管理基础</a></p><hr><p>从此处开始，为新的原创内容，相关数据结构代码换了一套新的，与之前的代码关系不大了。<br>建议新建一个项目，将配置文件复制过来，然后按照步骤走。</p><p>六、<a href="https://blog.amane64.site/2025/01/15/Spring%20Security%EF%BC%88%E5%85%AD%EF%BC%89RBAC%20%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0/">RBAC 结构实现</a><br>七、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E4%B8%83%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%BC%8F%E7%99%BB%E5%BD%95%E4%B8%8E%20JWT%20%E9%85%8D%E7%BD%AE/">自定义响应式登录与 JWT 配置</a><br>八、<a href="https://blog.amane64.site/2025/01/17/Spring%20Security%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E6%88%90%20Redis/">集成 Redis</a></p></blockquote><h2 id="Spring-Security（一）引入依赖及原理简述"><a href="#Spring-Security（一）引入依赖及原理简述" class="headerlink" title="Spring Security（一）引入依赖及原理简述"></a>Spring Security（一）引入依赖及原理简述</h2><blockquote><p>博主前言：本以为这个就是代替传统 jwt 的插件，没想到复杂程度如此之高。Spring Security 本身是个高度自定义化的组件，必须花时间重点学习一下。以下为个人配置学习的流程，从零到权限管理、redis嵌入等步骤。<br>本文基于尚硅谷的 Spring Security 教程学习，文章与原教程有不小出入，仅供参考。<br>B站视频链接：<a href="https://www.bilibili.com/video/BV14b4y1A7Wz">尚硅谷Java项目SpringSecurity+OAuth2权限管理实战教程</a></p></blockquote><h3 id="一、引入-Spring-Security-及示例操作"><a href="#一、引入-Spring-Security-及示例操作" class="headerlink" title="一、引入 Spring Security 及示例操作"></a>一、引入 Spring Security 及示例操作</h3><ol><li><p>实现简单的登录验证</p><p> 首先创建一个 spring boot 3 示例项目，只包含启动类和一个简单的 controller：</p><p> <img src="/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="项目结构"></p><p> 引入的 Spring Security 依赖：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 启动项目，访问8080端口，发现被重定向到 &#x2F;login，并弹出了一个登录页面：</p><blockquote><p>我配置了一个模板，这个模板不配置也可以，也是登录页面，不影响后续操作。</p></blockquote><p> <img src="/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png" alt="登录页面"></p><p> 默认的用户名为 user，密码由控制台给出：</p><p> <img src="/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%AF%86%E7%A0%81.png" alt="控制台密码"></p><p> 若要自定义用户与密码，修改 application.yml：</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">修改的新用户名</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">修改的新密码</span></span><br></pre></td></tr></table></figure><p> 此时重新启动程序，会发现控制台不再生成密码。</p></li><li><p>Spring Security 未自定义配置时的功能</p><ul><li>重定向<code>8080</code>端口，维护默认<code>url</code></li><li>自动创建和维护一个登录账户</li><li>提供基于表单的登录和注销流程</li><li>处理各式安全问题（csrf 跨域攻击、https等）</li></ul><p> 而上述这些功能，仅仅是引入了一个依赖，自动全实现了，这就是 Spring Security 强大之处。</p><p> 若有需要，都建议使用其替代原项目中的 token 模块。</p></li></ol><hr><h3 id="二、Spring-Security-实现原理"><a href="#二、Spring-Security-实现原理" class="headerlink" title="二、Spring Security 实现原理"></a>二、Spring Security 实现原理</h3><p>官网有这么一幅图，描述了 Spring 的 Servlet 架构：</p><p><img src="/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/Filter%E9%93%BE1.png" alt="Filter链1"></p><blockquote><p>一般情况下，Spring 的 Servlet 架构最终抽象为 Controller，所以理解为 Controller 就行。</p></blockquote><p>Spring 对 Servlet 的支持是基于Servlet过滤器的，其结构结构大致就是这样，由<code>Filter链</code>中一个个<code>Filter</code>过滤拦截，由此实现不同功能的检验操作。</p><p>每一个 Filter 都具备以下功能：</p><ul><li>防止下游的 <code>Filter</code> 实例或 <code>Servlet</code> 被调用。在这种情况下，<code>Filter</code> 通常会使用 <code>HttpServletResponse</code> 对客户端写入响应。</li><li>修改下游的 <code>Filter</code> 实例和 <code>Servlet</code> 所使用的 <code>HttpServletRequest</code> 或 <code>HttpServletResponse</code>。</li></ul><p>也正因如此，<code>Filter</code>之间的顺序是很重要的。不过，虽然 Servlet 容器允许通过使用自己的标准来注册<code>Filter</code>实例，但它不知道 Spring 定义的<code>Bean</code>。为了让<code>Filter</code>的工作托管给<code>Bean</code>，可以通过标准的Servlet容器机制来注册 <code>DelegatingFilterProxy</code>。</p><p><img src="/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/Filter%E9%93%BE2.png" alt="Filter链2"></p><p><code>DelegatingFilterProxy</code>从<code>ApplicationContext</code>查找<code>Bean Filter</code>，然后调用<code>Bean Filter</code>。</p><p>然后重量级的来了：</p><p><img src="/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/Filter%E9%93%BE3.png" alt="Filter链3"></p><p><code>SecurityFilterChain</code>被<code>FilterChainProxy</code>定当前请求应该调用哪些 Spring Security <code>Filter</code> 实例。</p><p>换句话说，Spring Security 从原本不支持<code>Bean</code>的<code>Filter链</code>中独立出来，扩展出一条支持<code>Bean</code>的<code>Filter子链</code>。</p><p>下面这段话从官网抄的，介绍了这么做的优势：<del>（脱裤子放屁）</del></p><blockquote><p>与直接向 Servlet 容器或 DelegatingFilterProxy 注册相比，<code>FilterChainProxy</code>有很多优势。首先，它为 Spring Security 的所有 Servlet 支持提供了一个起点。由于这个原因，如果你试图对 Spring Security 的 Servlet 支持进行故障诊断，在 <code>FilterChainProxy</code> 中添加一个调试点是一个很好的开始。</p><p>其次，由于<code>FilterChainProxy</code>是 Spring Security 使用的核心，它可以执行一些不被视为可有可无的任务。 例如，它清除了<code>SecurityContext</code>以避免内存泄漏。它还应用 Spring Security 的<code>HttpFirewall</code>来保护应用程序免受某些类型的攻击。</p><p>此外，它在确定何时应该调用 <code>SecurityFilterChain</code> 方面提供了更大的灵活性。在Servlet容器中，<code>Filter</code> 实例仅基于URL被调用。 然而，<code>FilterChainProxy</code> 可以通过使用 <code>RequestMatcher</code> 接口，根据 <code>HttpServletRequest</code> 中的任何内容确定调用。</p></blockquote><p>同样地，可以存在多个<code>Filter子链</code>，虽然可能用不到：</p><p><img src="/2025/01/12/Spring-Security%EF%BC%88%E4%B8%80%EF%BC%89%E5%BC%95%E5%85%A5-Spring-Security-%E5%8F%8A%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/Filter%E9%93%BE4.png" alt="Filter链4"></p><p>这就有点吓人了，不过确实如此，Spring Security 是一个高可靠性、高度自定义化的组件。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring-Security </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统知识点一览</title>
      <link href="/2024/12/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80%E8%A7%88/"/>
      <url>/2024/12/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h2 id="一、操作系统概述"><a href="#一、操作系统概述" class="headerlink" title="一、操作系统概述"></a>一、操作系统概述</h2><p>操作系统是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务的系统软件程序，是计算机系统的内核与基石。同时提供操作界面。</p><h3 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h3><ul><li>并发：多个活动在同一<strong>时间间隔</strong>内运行</li><li>共享：资源被多个进程共用</li><li>异步：进程以不可预知的速度向前推进</li><li>虚拟：物理的实体抽象成逻辑的对应物</li></ul><blockquote><p>并发与并行的区别：前者对多个进程交替处理，后者同时运行多个进程</p></blockquote><h3 id="操作系统的功能"><a href="#操作系统的功能" class="headerlink" title="操作系统的功能"></a>操作系统的功能</h3><ul><li>处理机管理：进程控制、进程同步、进程通信、死锁处理、处理机调度等</li><li>存储器管理：内存分配、地址映射、内存保护与共享、内存扩充等</li><li>文件管理：文件存储空间管理、目录管理、文件读写管理和保护等</li><li>设备管理：缓冲管理、设备分配、设备处理、虚拟设备等</li><li>用户接口：不常见</li></ul><h3 id="操作系统的历程"><a href="#操作系统的历程" class="headerlink" title="操作系统的历程"></a>操作系统的历程</h3><ol><li>手工操作阶段（纸带）</li><li>单道批处理阶段</li><li>多道批处理阶段（真正意义上的操作系统）<ul><li>实现并发功能</li></ul></li><li>分时操作系统<ul><li>提供人机交互，不能插队</li></ul></li><li>实时操作系统（可以插队）<ul><li>硬实时：必须控制对象在规定时间运行</li><li>软实时：不必须……</li></ul></li></ol><h3 id="处理机状态"><a href="#处理机状态" class="headerlink" title="处理机状态"></a>处理机状态</h3><ul><li>核心态（管态、内核态）：可以执行<strong>除访管指令外的</strong>所有指令</li><li>用户态（目态）：只能执行非特权指令</li><li>用户态 -&gt; 核心态：中断（由硬件完成）</li><li>核心态 -&gt; 用户态：特权指令<code>psw</code>的标志位，0用户1核心</li></ul><blockquote><p>访管指令：用户态 -&gt; 核心态的确认指令</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>特权指令：仅操作系统使用（IO、中断等）</li><li>非特权指令：普通运算（加法等）</li><li>内核程序：系统的管理者，可执行一切指令，运行在核心态</li><li>应用程序：普通用户启动的程序，只能使用非特权指令，运行在用户态</li></ul><h3 id="原语"><a href="#原语" class="headerlink" title="原语"></a>原语</h3><ol><li>处在操作系统最底层，是最接近硬件的软件部分</li><li>这些程序的运行具有原子性，操作不可再分，只能一气呵成</li><li>运行时间较短，调用频繁</li></ol><h3 id="中断、系统调用、体系结构"><a href="#中断、系统调用、体系结构" class="headerlink" title="中断、系统调用、体系结构"></a>中断、系统调用、体系结构</h3><ul><li>内中断（内部信号，如异常）：<ul><li>自愿中断：指令中断，如<code>Ctrl + c</code></li><li>强迫终端：错误异常</li></ul></li><li>外中断（外设请求、人工干预等，如打印机没纸）</li><li>系统调用：系统给程序提供的唯一接口，可获得OS的服务，在用户态发生核心态处理</li><li>体系结构：大内核、微内核</li></ul><hr><h2 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h2><p>进程：操作系统的基本执行单位。对于面向进程设计的系统，是程序的基本执行实体；对于面向线程设计的系统，是线程的容器。</p><h3 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h3><ul><li>动态性：动态产生，动态消亡</li><li>并发性：可以与其他进程一起并发执行</li><li>独立性：系统分配资源和调度的独立单位</li><li>异步性：按各自独立的、不可预知的速度向前推进</li><li>结构特征：<ul><li><code>PCB</code>进程控制：保存进程运行期间相关的数据，是进程存在的唯一标志</li><li>程序段：能被进程调度到<code>CPU</code>的代码</li><li>数据段：存放数据</li></ul></li></ul><p><img src="/2024/12/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80%E8%A7%88/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="进程状态图"></p><h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><ul><li>运行态：进程正在占用<code>CPU</code></li><li>就绪态：进程准备好了，一旦得到处理机资源（时间片）则立即运行</li><li>阻塞态：进程由于等待某一事件不能占用<code>CPU</code></li><li>创建状态：进程正在被创建</li><li>结束状态：进程正在从系统消失</li></ul><h3 id="进程的状态切换"><a href="#进程的状态切换" class="headerlink" title="进程的状态切换"></a>进程的状态切换</h3><ul><li>就绪态 -&gt; 运行态：被<code>CPU</code>调度，获得处理机资源（时间片）</li><li>运行态 -&gt; 就绪态：时间片结束或更高级进程进入</li><li>运行态 -&gt; 阻塞态：进程需要的某个资源未准备好</li><li>阻塞态 -&gt; 运行态：进程等待的事件到来或资源准备好</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程是操作系统<strong>运算调度</strong>的最小单位，是进程中实际运作单位，一个进程可以并发多个线程。</p><h3 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h3><ul><li><p>从就绪队列中按照给定的算法选择一个进程并分配资源，以实现进程并发地执行。</p></li><li><p>分类：</p><ul><li>高级调度（作业）</li><li>中级调度（内存）</li><li>低级调度（进程）</li></ul></li><li><p>调度方式：剥夺式（会强制停掉进程）、非剥夺式</p></li><li><p>调度准则：<code>CPU</code>利用率、系统吞吐量、周转时间、等待时间、响应时间等</p></li></ul><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><ul><li>先来先服务<code>FCFS</code>：<strong>传统队列</strong>的方式调度进程，优先考虑等待时间最长的作业，不考虑运行时间长短。可能因为长时间进程造成堵塞。</li><li>短作业优先<code>SJF</code>：<strong>单调堆</strong>的方式调度进程，优先考虑短时间作业。可能使长时间进程分配不到资源。</li><li>优先级调度算法<code>HPF</code>：<strong>优先队列</strong>的方式调度进程，根据优先值考虑先后顺序。可能使优先级低的进程分配不到资源。</li><li>高响应比优先调度算法时间片轮转<code>HRN</code>：根据<code>FCFS</code>和<code>SJF</code>的综合平衡响应比<code>1 + W/T</code>来决定先后顺序。</li><li>多级反馈调度算法：根据优先级分成数个<code>FCFS</code>队列，队列间考虑优先级，但队列中不会让渡。</li></ul><h3 id="调度算法的各个时间（对于单个进程来说）"><a href="#调度算法的各个时间（对于单个进程来说）" class="headerlink" title="调度算法的各个时间（对于单个进程来说）"></a>调度算法的各个时间（对于单个进程来说）</h3><ul><li>运行时间：完成时间 - 开始时间</li><li>周转时间：完成时间 - 到达时间</li><li>带权周转时间：周转时间 &#x2F; 运行时间</li><li>等待时间：周转时间 - 运行时间</li></ul><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><ol><li>原因：协调进程之间的相互制约关系</li><li>制约关系：<ul><li>直接制约关系（同步）：进程之间相互合作传递信息，需要线程协调其</li><li>间接制约关系（互斥）：数个进程间，只能有一个进程占用临界资源</li></ul></li><li>临界资源：一次仅允许一个进程使用的资源</li><li>临界区：限制同时执行该区域程序的线程数量（通常为<code>1</code>），确保资源访问互斥，避免数据不同步。</li></ol><h3 id="临界区的作用"><a href="#临界区的作用" class="headerlink" title="临界区的作用"></a>临界区的作用</h3><ul><li>保护共享资源：限制同时访问数量，避免数据不同步。</li><li>防止静态条件：避免线程的先后顺序导致的结果不确定性。</li><li>提高程序稳定性</li></ul><blockquote><p>临界区的实现依赖于<strong>互斥锁</strong>、<strong>信号量</strong>、<strong>条件变量</strong></p></blockquote><h3 id="临界区互斥"><a href="#临界区互斥" class="headerlink" title="临界区互斥"></a>临界区互斥</h3><ol><li>原则：<ul><li>空闲让进</li><li>忙则等待</li><li>有限等待：进程要在有限时间内退出。</li><li>让权等待：进程若不能进入自己的临界区，应让出<code>CPU</code>资源，避免忙等现象。</li></ul></li><li>基本方法：信号量<code>S</code>，利用<code>PV</code>操作实现互斥</li></ol><blockquote><p>申请资源<code>P</code>：<code>S - 1</code>后，若<code>S &gt;= 0</code>进程继续执行；<code>S &lt; 0</code>进程被阻塞后放入等待队列，然后转进程调度。</p><p>释放资源<code>V</code>：<code>S + 1</code>后，若<code>S &gt; 0</code>进程继续执行；<code>S &lt;= 0</code>从等待队列释放一个等待进程，在返回原进程继续执行或转进程调度。</p></blockquote><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><p>又称有限缓冲问题，即有数个线程创建数据到缓冲区（生产者），另有数个线程从缓冲区使用&#x2F;消耗&#x2F;删除数据（消费者）。该问题要保证生产者不会在缓冲区满的时候生产，消费者不会在缓冲区空的时候消费。</p><blockquote><p>重点有二：</p><ol><li>线程间同步：一个线程生产&#x2F;消费时，其它线程静默</li><li>互斥锁</li></ol></blockquote><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li>定义：多个进程因竞争资源造成的僵局，若无外力，进程无法推进</li><li>原因：非剥夺资源的竞争和进程的不恰当推进顺序</li><li>解决方法：<ol><li>预防：<ul><li>破坏互斥条件</li><li>破坏不剥夺条件</li><li>破坏请求和保持条件</li><li>破坏循环等待条件</li></ul></li><li>避免死锁：安全状态、银行家算法</li><li>检测死锁：利用死锁定理</li><li>解除死锁：资源剥夺法、撤销进程法、进程回退法</li></ol></li><li>避免死锁的资源申请公式：<br>最多资源申请数 &#x3D; （资源总数 &#x2F; 进程数）+ 1（不能整除时 + 1）</li></ul><h3 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h3><p>一种判断进程申请资源是否安全的算法（避免死锁）。举例（四个数字代表四个资源）：</p><table><thead><tr><th>Process（进程）</th><th>Allocation（返还）</th><th>Need（需要）</th><th>Available &#x2F; Work（空余）</th></tr></thead><tbody><tr><td>P0</td><td>0 0 3 2</td><td>0 0 1 2</td><td>1 6 2 2</td></tr><tr><td>P1</td><td>1 0 0 0</td><td>1 7 5 0</td><td></td></tr><tr><td>P2</td><td>1 3 5 4</td><td>2 3 5 6</td><td></td></tr><tr><td>P3</td><td>0 3 3 2</td><td>0 6 5 2</td><td></td></tr><tr><td>P4</td><td>0 0 1 4</td><td>0 6 5 6</td><td></td></tr></tbody></table><p>其中，<strong>安全序列</strong>是一条路径下始终满足资源供给的进程调用路径，若没有，则该状态是危险的。</p><p>下一个资源调用的值按照<code>Allocation</code>与上一个<code>Work</code>之和为准。</p><hr><h2 id="三、内存管理"><a href="#三、内存管理" class="headerlink" title="三、内存管理"></a>三、内存管理</h2><p>目的：更好的支持多道程序的并发执行，提高系统性能。</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol><li>内存空间的分配与回收</li><li>存储的保护和共享，保证各道作业互不干扰</li><li>地址转换：变换逻辑与物理地址</li><li>内存扩充：逻辑上扩充内存</li></ol><h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><ul><li>逻辑地址（给程序看）：便于查看的假定编号，如0、1、2、3…</li><li>物理地址（给内存看）：实际存储的地址编号，如<code>2347892</code></li></ul><blockquote><p>本章核心即为两种地址的转换</p></blockquote><h3 id="程序的装入"><a href="#程序的装入" class="headerlink" title="程序的装入"></a>程序的装入</h3><ul><li><p>绝对装入：</p><ul><li>编译时，若知道程序驻留在内存的位置，则直接生成绝对地址的目标代码（不重定位），按照物理内存的位置赋予实际的物理地址。</li><li>优点：效率高</li><li>缺点：<ol><li>受内存大小显示，能装入内存并发执行的进程数大幅减少。</li><li>需要知道内存的空闲地址，多通道程序下不可能实现，所以仅限于单道程序环境。</li></ol></li></ul></li><li><p>静态重定位：</p><ul><li>在程序开始执行前，程序种指令和数据的各个地址均已完成重定位。地址变换通常在装入时一次完成，以后不再改变。</li><li>优点：不需要硬件支持（重定位寄存器）。</li><li>缺点：不能在内存中搬动，且要求程序的存储空间是连续的（对比动态重定位，类似数组与链表的物理存储方式）。</li></ul></li><li><p>动态重定位：</p><ul><li>把地址转换推迟到程序执行时再进行。</li><li>优点：可以解决碎片问题（不需要连续内存）。</li><li>缺点：需要硬件支持（重定位寄存器），否则会影响指令的执行速度。</li></ul></li></ul><blockquote><p>重定位：虚拟地址到物理地址的映射</p></blockquote><h3 id="程序的链接"><a href="#程序的链接" class="headerlink" title="程序的链接"></a>程序的链接</h3><ul><li>静态链接：程序运行之前，将各目标模块及它们所需的库函数链接成一个完整的可执行程序，以后不再拆开。</li><li>装入时链接：编译后得到一组目标模块，装入内存时，边装入边链接。</li><li>运行时链接：程序需要该目标模块时，再去链接，便于修改修改和更新。</li></ul><h3 id="内存空间的分配与回收"><a href="#内存空间的分配与回收" class="headerlink" title="内存空间的分配与回收"></a>内存空间的分配与回收</h3><ul><li>连续分配管理方式<ul><li>单一连续分配：分配到内存固定的区域（单用户&#x2F;单任务的操作系统）</li><li>固定分区分配：分配到内存不同的<strong>固定</strong>区域</li><li>动态分区配置：按照程序的需要（算法）进行动态划分<ul><li>首次适应：以地址递增的次序链接。分配内存时顺序查找，找到空间大小满足的分区。</li><li>最佳适应：按容量递增的方式形成分区链，找到第一个满足要求的分区。</li><li>最坏适应：以容量递减的次序链接，找到第一个满足要求（空间最大）的分区。</li><li>临近适应：在首次适应的基础上，再次划分时，从上次查找结束的位置继续。</li></ul></li></ul></li><li>非连续分配管理方式：<br>将内存空间分为一个个大小相等的分区，每个分区是一个<strong>内存块 &#x2F; 页框 &#x2F; 页帧 &#x2F; 物理块</strong>，每个内存块有一个编号，从<code>0</code>开始。将用户进程的地址空间也分为与内存块大小相等的一个个区域，称为<strong>页 &#x2F; 页面</strong>，每个页也有一个编号，从0开始。<br>操作系统以内存块为单位分配空间，进程的每个页分别放入一个内存块内，两者存在哈希对应关系。</li></ul><blockquote><p>万变不离其宗，经典的连续与离散问题</p></blockquote><p><img src="/2024/12/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80%E8%A7%88/%E9%9D%9E%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AE%A1%E7%90%86%E5%9B%BE.png" alt="非连续内存分配管理图"></p><blockquote><p>快表（<code>TLB</code>）查询：只记录最近访问的页表项的副本，可以加快地址变换的速度（<code>TLB</code>不是内存）</p></blockquote><p><img src="/2024/12/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80%E8%A7%88/%E5%BF%AB%E8%A1%A8%E6%9F%A5%E8%AF%A2.png" alt="快表查询"></p><blockquote><p>分段式存储管理：与分页式类似，作业的地址空间被分为若干个段，页表改为段表。主要部分离散，分出去的集合连续。</p><p>分段产生外部碎片，分页产生内部碎片</p></blockquote><h3 id="地址变换过程"><a href="#地址变换过程" class="headerlink" title="地址变换过程"></a>地址变换过程</h3><ol><li>算页号、页内偏移量</li><li>检查页号合法性</li><li>（<code>TLB</code>）查快表，若命中跳<code>5</code>，否则继续<code>4</code></li><li>查页表，找到对应内存块号，（<code>TLB</code>）并将页表项复制到快表中</li><li>根据内存快好与页内偏移量得到物理地址</li><li>访问目标内存单元</li></ol><h3 id="内存扩充"><a href="#内存扩充" class="headerlink" title="内存扩充"></a>内存扩充</h3><ul><li>覆盖（同一进程中）：将程序分为多个模块，常用的常驻内存，不常用的按需调入内存。</li><li>交换（不同进程之间）：内存空间紧张时，系统将某些进程暂时换出外存，将外存中具备条件的进程换入内存。（进程在内外存之间动态调度）’</li><li>虚拟内存：<ul><li>原理：在逻辑上扩充内存</li><li>组成部分：页表机制、中断机制（缺页中断）、地址变换机制、内存与外存</li><li>整体流程：地址变换过程 + 置换算法</li><li>置换算法：<ol><li>先进先出（<code>FIFO</code>）：淘汰最先进入内存的页面，可能会有<code>Belady</code>异常现象（经典队列）</li><li>最近最久未用（<code>LRU</code>）：将内存中最长时间未被访问的页面淘汰（需要寄存器与栈）</li><li>最近最少用（<code>clock</code>）：将内存中当前使用最少的页面淘汰</li><li>最优（<code>OPT</code>）：将以后不再使用或最长时间内不再使用的页面淘汰（理论，不可实现）</li></ol></li></ul></li></ul><hr><h2 id="四、文件系统"><a href="#四、文件系统" class="headerlink" title="四、文件系统"></a>四、文件系统</h2><p>文件是以计算机硬盘为载体，存储在计算机上的信息集合。</p><p>文件系统是操作系统中负责操纵和管理文件的一整套设施，实现文件的共享和保护。</p><p>影响文件安全的主要因素：人为、自然、系统</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>文件管理</li><li>目录管理</li><li>文件空间管理</li><li>文件共享和保护</li><li>提供接口</li></ul><h3 id="文件逻辑结构的分类"><a href="#文件逻辑结构的分类" class="headerlink" title="文件逻辑结构的分类"></a>文件逻辑结构的分类</h3><ol><li>无结构（流式）文件：最简单的文件组成形式<ul><li>将数据按顺序组织成记录并累积保存，是有序相关信息的集合，以字节<code>byte</code>为单位。</li><li>没有结构，对记录的访问只能穷举搜索。故不适用于大多数应用，但管理简单。</li><li>对基本信息单位操作不多的文件适用，如源程序文件、目标代码文件等。</li></ul></li><li>有结构（记录式）文件：<ul><li>顺序文件：文件中的记录像数组一样顺序排列，访问时需要顺序搜索文件。</li><li>索引文件：通过一个索引 &#x2F; 哈希表来检索文件。</li><li>索引顺序文件：上两者结合。</li></ul></li></ol><h3 id="目录和目录结构"><a href="#目录和目录结构" class="headerlink" title="目录和目录结构"></a>目录和目录结构</h3><ol><li>文件控制块（<code>FCB</code>）：文件系统内部，每个文件均唯一地设置一个文件控制块。用于描述和控制文件的数据结构，与文件一一对应。<ul><li>基本信息：文件名、物理地址、逻辑结构、物理结构等。</li><li>存取控制信息：是否可读 &#x2F; 写、访问用户黑名单等。</li><li>使用信息：创建时间、修改时间等。</li></ul></li><li>目录结构：单级、二级、树形（常见的“文件夹”结构）、图形</li></ol><h3 id="文件实现"><a href="#文件实现" class="headerlink" title="文件实现"></a>文件实现</h3><ol><li>文件分配方式：连续分配、链接分配、索引分配（对应三大种数据结构）</li><li>文件存储空间管理：<ul><li>空闲表法：于内存管理中的<strong>动态分区</strong>相似，按照程序的需要（算法），为文件动态划分一个连续的存储空间。<ul><li>同样可使用首次适应、最佳适应、最坏适应、临近适应等算法。</li><li>回收：动态分区相似，根据前后的临近空间分为四种情况，回收时要注意表项的合并问题。</li></ul></li><li>空间链表法：操作系统保存链头、链尾指针。<ul><li>分配：若某文件申请<code>K</code>个盘块，则可以采用分配算法从链头开始检索，按照算法规则找到一个大小符合要求的空闲盘区。若没有合适的连续空闲块，也可以将不同盘区的盘块同时分配给一个文件，注意分配后可能要修改相应的链指针、盘区大小等数据。</li><li>回收：若与某个空闲盘区相邻，则要将回收区合并到空闲盘区中。若没有相邻，则作为单独的空闲盘区挂在链尾。</li></ul></li><li>位示图法：以二维布尔数组（位示图）表示盘块状态，两个维度的序号分别表示字号和位号。<ul><li>分配：顺序扫描位示图，找到<code>K</code>个相邻或不相邻的空闲位置，再根据字号、位号算出对应盘块号，分配给文件，最后设置对应位置为已分配。</li><li>回收：根据盘块号计算字号和位号，将设置对应位置为空闲。</li></ul></li></ul></li></ol><h3 id="磁盘管理（机械硬盘）"><a href="#磁盘管理（机械硬盘）" class="headerlink" title="磁盘管理（机械硬盘）"></a>磁盘管理（机械硬盘）</h3><p>需要注意的是，固态硬盘在逻辑构造上接近内存，其物理结构也与机械硬盘大不相同，不适用下述概念。</p><ol><li><p>机械硬盘构造：</p><ul><li>盘片：记录信息的载体，理解为纸张，一个盘片可能含两个盘面，理解为纸张正反面使用。一块硬盘可以有多块盘片。</li><li>磁头：修改指定位置的<code>Byte</code>位，理解为笔。一块硬盘可以有多个磁头，每个盘面均对应一个磁头。</li><li>磁臂：固定磁头悬浮在盘面上，理解为手。只存在一个磁臂，所有磁头平行排列于磁头上，所以所有磁头共进退，所有盘面中相对位置相同的磁道组成柱面。</li></ul></li><li><p>磁盘地址结构：柱面号、盘面号、扇面号</p></li><li><p>磁盘调度算法：主要目标是优化机械硬盘的寻道时间，固态硬盘对应的查找时间几乎可以忽略不计，故不需要调度算法。</p><ul><li>先到先服务<code>FCFS</code>：按请求到达的顺序进行处理，不做优化。</li><li>最短查找时间优先<code>SSTF</code>：选择距离当前磁头位置最近的请求进行处理，目的是最小化磁头的寻址时间。</li><li>扫描 &#x2F; 电梯算法<code>SCAN</code>：磁头在盘片上从一个方向移动到另一个方向，处理经过的所有请求。到了盘片的末端后，磁头反转方向并继续处理。</li><li>循环扫描算法<code>C-SCAN</code>：类似于<code>SCAN</code>，但当磁头到达盘片的最远端时，会立即跳回起始端，而不是反向扫描。</li><li><code>LOOK</code>和<code>C-LOOK</code>：类似于<code>SCAN</code>和<code>C-SCAN</code>，但磁头在到达最后一个请求后会停止，而不是继续走到盘片的尽头。</li></ul></li></ol><h3 id="多级索引"><a href="#多级索引" class="headerlink" title="多级索引"></a>多级索引</h3><p>将索引表分层，使第一层索引块指向第二层的索引块，还可以跟布局文件大小的要求继续建立更多索引块。顶层索引表只占一个索引块，非底层的索引表表项记录指向下一层索引表的开始地址，底层的索引表表项指向数据块地址。</p><p>假设磁盘块大小为<code>1kb</code>，一个索引表项占<code>4b</code>，则一个磁盘块能存放<code>1kb / 4b = 256</code>个索引项。</p><p>若改用两层索引，则文件的最大长度可达<code>256 ^ 2 * 1kb = 64mb</code>。</p><hr><h2 id="五、输入输出（IO）设备管理"><a href="#五、输入输出（IO）设备管理" class="headerlink" title="五、输入输出（IO）设备管理"></a>五、输入输出（IO）设备管理</h2><p>与设备无关，目的是管理统一化。</p><h3 id="设备简述"><a href="#设备简述" class="headerlink" title="设备简述"></a>设备简述</h3><ol><li>分类：存储 &#x2F; 输入输出设备、块 &#x2F; 字符设备、低 &#x2F; 中 &#x2F; 高速设备。</li><li>控制方式：<ul><li>程序直接控制（查询方式）：<code>CPU</code>监听设备控制器是否将数据放到了存储器中（或者反过来），当监听到操作后（即完成<code>IO</code>）<code>CPU</code>才能干别的事（参考代码编程时的控制台输入）。</li><li>中断方式：设备控制器将数据放到了存储器中（或者反过来）后，向<code>CPU</code>发出中断请求。</li><li><code>DMA</code>方式：中断方式的优化。中断方式是以字节为单位进行中断，<code>DMA</code>将数据直接存入内存，待<code>IO</code>结束后再向<code>CPU</code>发出中断。</li><li><code>IO</code>通道控制方式：上述方式只能传输一个连续的数据块，<code>IO</code>通道控制方式则可以传输不连续的数据块，减少<code>CPU</code>干预。</li></ul></li></ol><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><ul><li>目的：<ol><li>缓和<code>CPU</code>与外设间速度不匹配的矛盾</li><li>提高<code>CPU</code>与外设之间的并行性</li><li>减少对<code>CPU</code>的中断次数</li></ol></li><li>设置方式：<ul><li>单缓冲：信息输入 &#x2F; 输出率相差很大时，可采用该方式。</li><li>双缓冲：信息输入 &#x2F; 输出率相差不大时，利用该方式，实现两者并行。</li><li>多缓冲：对于阵发性的<code>IO</code>，为了解决速度不匹配的问题，可以设立多个缓冲区。</li></ul></li></ul><h3 id="常用设备分配技术"><a href="#常用设备分配技术" class="headerlink" title="常用设备分配技术"></a>常用设备分配技术</h3><ul><li>根据使用性质分类：<ul><li>独占设备：不能共享的设备，只允许一个进程独占，如打印机。</li><li>共享设备：可以多个进程共享的设备，如磁盘。</li><li>虚拟设备：利用技术手段，将独占设备改造为共享设备。</li></ul></li><li>针对三种设备采用三种分配技术：<ul><li>独占分配：将独占设备固定第分配给一个进程，直至该进程完成<code>IO</code>操作并释放为止。</li><li>共享分配：适用于高速、大容量的直接存储设备。由多个进程共享一台设备，每个进程只用其中一部分。</li><li>虚拟分配：利用共享设备模拟独占设备，从而使独占设备成为可共享的、快速的<code>IO</code>设备，如假脱机操作。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 期末复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Java 中运行 Python 脚本</title>
      <link href="/2024/08/15/%E5%9C%A8-Java-%E4%B8%AD%E8%BF%90%E8%A1%8C-Python-%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/08/15/%E5%9C%A8-Java-%E4%B8%AD%E8%BF%90%E8%A1%8C-Python-%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="在-Java-中运行-Python-脚本"><a href="#在-Java-中运行-Python-脚本" class="headerlink" title="在 Java 中运行 Python 脚本"></a>在 Java 中运行 Python 脚本</h2><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.amane.processTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;E:/文档/Code/Python/processTest/main.py&quot;</span>; <span class="comment">// 脚本路径</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;python&quot;</span>, path);    <span class="comment">// 构建进程</span></span><br><span class="line">            processBuilder.redirectErrorStream(<span class="literal">true</span>);   <span class="comment">// 合并标准输出和错误输出</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">process</span> <span class="operator">=</span> processBuilder.start();   <span class="comment">// 启动进程</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取脚本输出</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) System.out.println(line);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取脚本错误输出</span></span><br><span class="line"><span class="comment">//            var errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));</span></span><br><span class="line"><span class="comment">//            while ((line = errorReader.readLine()) != null) System.err.println(line);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待脚本执行完毕</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">exitCode</span> <span class="operator">=</span> process.waitFor();</span><br><span class="line">            System.out.println(<span class="string">&quot;Exited with code: &quot;</span> + exitCode);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Java </tag>
            
            <tag> 跨语言运行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3+Element-Plus实现I18n</title>
      <link href="/2024/07/01/Vue3-Element-Plus-%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96-I18n/"/>
      <url>/2024/07/01/Vue3-Element-Plus-%E5%AE%9E%E7%8E%B0%E5%9B%BD%E9%99%85%E5%8C%96-I18n/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue3-Element-Plus-实现国际化-I18n"><a href="#Vue3-Element-Plus-实现国际化-I18n" class="headerlink" title="Vue3 + Element-Plus 实现国际化 I18n"></a>Vue3 + Element-Plus 实现国际化 I18n</h2><blockquote><p>前言：本文将<code>vue</code>部署在了<code>electron</code>上，需注意根目录并非为<code>@</code>而是<code>@renderer</code>，仅需替换，不影响其它<code>vue</code>的使用方法</p></blockquote><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add vue-i18n element-plus --save</span><br></pre></td></tr></table></figure><h3 id="2-配置目录"><a href="#2-配置目录" class="headerlink" title="2. 配置目录"></a>2. 配置目录</h3><blockquote><ul><li>src<ul><li>locales<ul><li>en.json</li><li>zh-cn.json</li><li>zh-tw.json</li><li>其它语言文件…</li></ul></li><li>i18n<ul><li>index.ts</li></ul></li></ul></li></ul></blockquote><p>三个语言文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// zh-cn</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hello&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好，世界&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;欢迎来到 Vue 3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// zh-tw</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hello&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你好，世界&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;歡迎來到 Vue 3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// en</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hello&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello World&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;welcome&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Welcome to Vue 3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-初始化-vue-i18n"><a href="#3-初始化-vue-i18n" class="headerlink" title="3. 初始化 vue-i18n"></a>3. 初始化 <code>vue-i18n</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从本地存储获取语言设置，默认为简体中文</span></span><br><span class="line"><span class="keyword">const</span> getDefaultLocale = (): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;locale&#x27;</span>) || <span class="string">&#x27;zh-cn&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 i18n</span></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">legacy</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">locale</span>: <span class="title function_">getDefaultLocale</span>(),</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;zh-cn&#x27;</span>: &#123;&#125;, <span class="comment">// 简体中文</span></span><br><span class="line">    <span class="string">&#x27;zh-tw&#x27;</span>: &#123;&#125;, <span class="comment">// 繁体中文</span></span><br><span class="line">    <span class="attr">en</span>: &#123;&#125; <span class="comment">// 英文</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态加载语言包</span></span><br><span class="line"><span class="keyword">const</span> loadLocaleMessages = <span class="title function_">async</span> (<span class="attr">locale</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 检查语言包是否存在（去除ts报错）</span></span><br><span class="line">    <span class="keyword">switch</span> (locale) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;zh-cn&#x27;</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;zh-tw&#x27;</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;en&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`未知国际化配置值: <span class="subst">$&#123;locale&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> messages = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`@renderer/locales/<span class="subst">$&#123;locale&#125;</span>.json`</span>)</span><br><span class="line">    i18n.<span class="property">global</span>.<span class="title function_">setLocaleMessage</span>(locale, messages.<span class="property">default</span>)</span><br><span class="line">    i18n.<span class="property">global</span>.<span class="property">locale</span>.<span class="property">value</span> = locale</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;locale&#x27;</span>, locale) <span class="comment">// 记录到本地存储</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Failed to load locale messages for <span class="subst">$&#123;locale&#125;</span>:`</span>, error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; getDefaultLocale, i18n, loadLocaleMessages &#125;</span><br></pre></td></tr></table></figure><h3 id="4-配置main-ts"><a href="#4-配置main-ts" class="headerlink" title="4. 配置main.ts"></a>4. 配置main.ts</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 Element Plus 国际化语言包</span></span><br><span class="line"><span class="keyword">import</span> &#123; getDefaultLocale, i18n, loadLocaleMessages &#125; <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&#x27;element-plus/es/locale/lang/zh-cn&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhTw <span class="keyword">from</span> <span class="string">&#x27;element-plus/es/locale/lang/zh-tw&#x27;</span></span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">&#x27;element-plus/es/locale/lang/en&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> switchLocale = (<span class="attr">locale</span>: <span class="built_in">string</span>): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (locale) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;zh-cn&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> zhCn</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;zh-tw&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> zhTw</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;en&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> en</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> zhCn</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locale = <span class="title function_">getDefaultLocale</span>()</span><br><span class="line"><span class="title function_">loadLocaleMessages</span>(locale)</span><br><span class="line">app.<span class="title function_">use</span>(i18n)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>, &#123; <span class="attr">locale</span>: <span class="title function_">switchLocale</span>(locale) &#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-示例使用与切换方法"><a href="#5-示例使用与切换方法" class="headerlink" title="5. 示例使用与切换方法"></a>5. 示例使用与切换方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; useI18n &#125; from &#x27;vue-i18n&#x27;;</span><br><span class="line">import &#123; loadLocaleMessages &#125; from &#x27;@renderer/i18n&#x27;;</span><br><span class="line">    </span><br><span class="line">const &#123; locale &#125; = useI18n();</span><br><span class="line">const currentLang = ref(locale.value);</span><br><span class="line"></span><br><span class="line">const switchLanguage = async (lang: string): Promise&lt;void&gt; =&gt; &#123;</span><br><span class="line">  await loadLocaleMessages(lang);</span><br><span class="line">  currentLang.value = lang;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;currentLang&quot; @change=&quot;switchLanguage&quot; placeholder=&quot;选择语言&quot;&gt;</span><br><span class="line">      &lt;el-option label=&quot;简体中文&quot; value=&quot;zh-cn&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;el-option label=&quot;繁體中文&quot; value=&quot;zh-tw&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;el-option label=&quot;English&quot; value=&quot;en&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123; $t(&#x27;message.hello&#x27;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $t(&#x27;message.welcome&#x27;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue3 </tag>
            
            <tag> Element-Plus </tag>
            
            <tag> Electron </tag>
            
            <tag> i18n </tag>
            
            <tag> 国际化 </tag>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron + vue3 + ts 手动保存/读取本地文件</title>
      <link href="/2024/06/20/electron-vue3-ts-%E6%89%8B%E5%8A%A8%E4%BF%9D%E5%AD%98-%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"/>
      <url>/2024/06/20/electron-vue3-ts-%E6%89%8B%E5%8A%A8%E4%BF%9D%E5%AD%98-%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="electron-vue3-ts-手动保存-读取本地文件"><a href="#electron-vue3-ts-手动保存-读取本地文件" class="headerlink" title="electron + vue3 + ts 手动保存&#x2F;读取本地文件"></a>electron + vue3 + ts 手动保存&#x2F;读取本地文件</h2><h3 id="1-在src-main-index-ts中添加文件操作相关IPC"><a href="#1-在src-main-index-ts中添加文件操作相关IPC" class="headerlink" title="1. 在src/main/index.ts中添加文件操作相关IPC"></a>1. 在<code>src/main/index.ts</code>中添加文件操作相关<code>IPC</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件操作 IPC</span></span><br><span class="line"><span class="comment">// 处理保存文件的IPC请求</span></span><br><span class="line">ipcMain.<span class="title function_">handle</span>(<span class="string">&#x27;save-file&#x27;</span>, <span class="title function_">async</span> (_, &#123; content &#125;: &#123; <span class="attr">content</span>: <span class="built_in">string</span> &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; canceled, filePath &#125; = <span class="keyword">await</span> dialog.<span class="title function_">showSaveDialog</span>(mainWindow, &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;保存文件&#x27;</span>,</span><br><span class="line">    <span class="attr">defaultPath</span>: <span class="title function_">join</span>(app.<span class="title function_">getPath</span>(<span class="string">&#x27;documents&#x27;</span>), <span class="string">&#x27;example.txt&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!canceled &amp;&amp; filePath) &#123;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(filePath, content, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> filePath</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理读取文件的IPC请求</span></span><br><span class="line">ipcMain.<span class="title function_">handle</span>(<span class="string">&#x27;read-file&#x27;</span>, <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; canceled, filePaths &#125; = <span class="keyword">await</span> dialog.<span class="title function_">showOpenDialog</span>(mainWindow, &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;打开文件&#x27;</span>,</span><br><span class="line">    <span class="attr">defaultPath</span>: app.<span class="title function_">getPath</span>(<span class="string">&#x27;documents&#x27;</span>),</span><br><span class="line">    <span class="attr">properties</span>: [<span class="string">&#x27;openFile&#x27;</span>],</span><br><span class="line">    <span class="attr">filters</span>: [&#123; <span class="attr">name</span>: <span class="string">&#x27;文本文件&#x27;</span>, <span class="attr">extensions</span>: [<span class="string">&#x27;txt&#x27;</span>] &#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!canceled &amp;&amp; filePaths.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> content = fs.<span class="title function_">readFileSync</span>(filePaths[<span class="number">0</span>], <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">filePath</span>: filePaths[<span class="number">0</span>], content &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-在src-preload-index-ts中的自定义api内暴露相关接口"><a href="#2-在src-preload-index-ts中的自定义api内暴露相关接口" class="headerlink" title="2. 在src/preload/index.ts中的自定义api内暴露相关接口"></a>2. 在<code>src/preload/index.ts</code>中的自定义<code>api</code>内暴露相关接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义 api</span></span><br><span class="line"><span class="keyword">const</span> api = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将内容保存到文件中</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> content 要保存的文件内容</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> 返回保存操作的 Promise 结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">saveFile</span>: <span class="function">(<span class="params"><span class="attr">content</span>: <span class="built_in">string</span></span>) =&gt;</span> ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&#x27;save-file&#x27;</span>, &#123; content &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读取文件内容</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> 返回一个包含文件内容的 Promise 对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">readFile</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&#x27;read-file&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-构建ts操作文件，vue调用函数即可手动本地操作文件"><a href="#3-构建ts操作文件，vue调用函数即可手动本地操作文件" class="headerlink" title="3. 构建ts操作文件，vue调用函数即可手动本地操作文件"></a>3. 构建<code>ts</code>操作文件，<code>vue</code>调用函数即可手动本地操作文件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本地文件数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> localFileData = &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="built_in">string</span>    <span class="comment">// 文件路径</span></span><br><span class="line">  <span class="attr">content</span>: <span class="built_in">string</span> <span class="comment">// 文件内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 文件内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 保存的文件路径或 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> saveFile = <span class="title function_">async</span> (<span class="attr">content</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span> | <span class="literal">null</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">await</span> (<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">api</span>.<span class="title function_">saveFile</span>(content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 读取的文件内容和路径或 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="title function_">async</span> (): <span class="title class_">Promise</span>&lt;localFileData | <span class="literal">null</span>&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">await</span> (<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">api</span>.<span class="title function_">readFile</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; saveFile, readFile &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> Electron </tag>
            
            <tag> Chrome </tag>
            
            <tag> file-save/load </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron + vue3 路由新窗口</title>
      <link href="/2024/06/18/electron-vue3-%E8%B7%AF%E7%94%B1%E6%96%B0%E7%AA%97%E5%8F%A3/"/>
      <url>/2024/06/18/electron-vue3-%E8%B7%AF%E7%94%B1%E6%96%B0%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="electron-vue3-路由新窗口"><a href="#electron-vue3-路由新窗口" class="headerlink" title="electron + vue3 路由新窗口"></a>electron + vue3 路由新窗口</h2><blockquote><p>注意：不建议使用该方法，仅供参考</p></blockquote><h3 id="一、路由结构"><a href="#一、路由结构" class="headerlink" title="一、路由结构"></a>一、路由结构</h3><p>​  现假定有如下路由结构</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/page1&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;page1&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Page1</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="二、简单控制窗口"><a href="#二、简单控制窗口" class="headerlink" title="二、简单控制窗口"></a>二、简单控制窗口</h3><p>​  简单实现窗口的创建与跨窗口销毁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">const router = useRouter();</span><br><span class="line">let openedWindow: Window | null;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 导航到特定路由页面。</span><br><span class="line"> * </span><br><span class="line"> * 该函数用于将当前的路由导航到&#x27;/page1&#x27;。它不接受任何参数，也不返回任何值。</span><br><span class="line"> * 主要用于页面内的路由切换，以提供不同的页面内容。</span><br><span class="line"> */</span><br><span class="line">const toRoute: Function = (): void =&gt; &#123;</span><br><span class="line">  router.push(&#x27;/page1&#x27;)</span><br><span class="line">  console.log(&#x27;click to route.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在新窗口打开特定路由页面。</span><br><span class="line"> * </span><br><span class="line"> * 该函数用于打开一个新窗口，并在该窗口加载&#x27;/page1&#x27;页面。它不接受任何参数，也不返回任何值。</span><br><span class="line"> * 主要用于需要在新窗口中显示页面的场景，例如打开帮助文档或用户协议。</span><br><span class="line"> */</span><br><span class="line">const toWindow: Function = (): void =&gt; &#123;</span><br><span class="line">  openedWindow = window.open(&quot;/page1&quot;)</span><br><span class="line">  console.log(&#x27;click to window.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 关闭之前打开的窗口。</span><br><span class="line"> * </span><br><span class="line"> * 该函数用于关闭之前通过toWindow函数打开的窗口。它检查openedWindow变量是否定义，</span><br><span class="line"> * 如果定义了，则调用窗口的close方法关闭窗口。该函数不接受任何参数，也不返回任何值。</span><br><span class="line"> * 主要用于在用户完成相关操作后，清理之前打开的窗口，以避免内存泄漏或窗口堆积。</span><br><span class="line"> */</span><br><span class="line">const closeWindowByOtherPage: Function = (): void =&gt; &#123;</span><br><span class="line">  if (openedWindow) &#123;</span><br><span class="line">    openedWindow.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 弹出警告对话框。</span><br><span class="line"> * </span><br><span class="line"> * 该函数无参数。</span><br><span class="line"> * </span><br><span class="line"> * @returns &#123;void&#125; 无返回值。</span><br><span class="line"> */</span><br><span class="line">const showAlert: Function = (): void =&gt; &#123;</span><br><span class="line">  window.alert(&#x27;ciallo world&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="三、部分使用操作窗口方法"><a href="#三、部分使用操作窗口方法" class="headerlink" title="三、部分使用操作窗口方法"></a>三、部分使用操作窗口方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开一个新的浏览器窗口或标签页</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;https://example.com&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开一个新窗口，设置宽度为800像素，高度为600像素</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;/page1&quot;</span>, <span class="string">&quot;_blank&quot;</span>, <span class="string">&quot;width=800,height=600&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭当前窗口</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示一个警告对话框</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;这是一个警告对话框&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示一个确认对话框并返回用户点击的结果（布尔值）</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;你确定要继续吗？&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">  <span class="comment">// 用户点击了“确定”</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 用户点击了“取消”</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示一个提示对话框并返回用户输入的结果（字符串）</span></span><br><span class="line"><span class="keyword">const</span> userInput = <span class="variable language_">window</span>.<span class="title function_">prompt</span>(<span class="string">&#x27;请输入你的名字:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (userInput !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// 用户输入了内容</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 用户取消了输入</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定的时间后执行代码（一次性定时器）</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3秒后执行&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以指定的时间间隔重复执行代码（循环定时器）</span></span><br><span class="line"><span class="keyword">const</span> intervalId = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;每秒执行一次&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 可以使用 clearInterval 来停止定时器</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 window.location 进行页面导航和获取 URL 信息</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;https://example.com&#x27;</span>;  <span class="comment">// 重定向到另一个页面</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>);  <span class="comment">// 当前路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>);  <span class="comment">// 查询字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>);  <span class="comment">// 锚点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 localStorage 进行持久化存储</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);  <span class="comment">// 存储数据</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>);  <span class="comment">// 获取数据</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>);  <span class="comment">// 删除数据</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">clear</span>();  <span class="comment">// 清除所有数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 sessionStorage 进行会话存储</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);  <span class="comment">// 存储数据</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;key&#x27;</span>);  <span class="comment">// 获取数据</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;key&#x27;</span>);  <span class="comment">// 删除数据</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">clear</span>();  <span class="comment">// 清除所有数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚动到指定的位置</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>);  <span class="comment">// 滚动到页面顶部</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 addEventListener 和 removeEventListener 进行事件监听和移除</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resizeHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口大小改变&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, resizeHandler);  <span class="comment">// 监听窗口大小改变事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, resizeHandler);  <span class="comment">// 移除事件监听器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面加载和卸载时触发的事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面已加载&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onunload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面卸载前&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Electron 特定的窗口管理方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; remote &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> currentWindow = remote.<span class="title function_">getCurrentWindow</span>();  <span class="comment">// 获取当前窗口</span></span><br><span class="line">currentWindow.<span class="title function_">maximize</span>();  <span class="comment">// 最大化窗口</span></span><br><span class="line">currentWindow.<span class="title function_">minimize</span>();  <span class="comment">// 最小化窗口</span></span><br><span class="line">currentWindow.<span class="title function_">close</span>();  <span class="comment">// 关闭窗口</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> Electron </tag>
            
            <tag> Chrome </tag>
            
            <tag> Vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron-vite-vue3-ts 快速开始</title>
      <link href="/2024/06/16/electron-vite-vue3-ts-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
      <url>/2024/06/16/electron-vite-vue3-ts-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="electron-vite-vue3-ts-快速开始"><a href="#electron-vite-vue3-ts-快速开始" class="headerlink" title="electron-vite-vue3-ts 快速开始"></a>electron-vite-vue3-ts 快速开始</h2><h3 id="一、安装依赖"><a href="#一、安装依赖" class="headerlink" title="一、安装依赖"></a>一、安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i electron-vite -D</span><br></pre></td></tr></table></figure><h3 id="二、快速构建"><a href="#二、快速构建" class="headerlink" title="二、快速构建"></a>二、快速构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create @quick-start/electron &lt;项目名称&gt; --template vue-ts</span><br></pre></td></tr></table></figure><h3 id="三、项目结构"><a href="#三、项目结构" class="headerlink" title="三、项目结构"></a>三、项目结构</h3><h4 id="1-结构"><a href="#1-结构" class="headerlink" title="1.结构"></a>1.结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├──src</span><br><span class="line">│  ├──main <span class="comment"># 主进程</span></span><br><span class="line">│  │  ├──index.ts</span><br><span class="line">│  │  └──...</span><br><span class="line">│  ├──preload <span class="comment"># 预加载脚本</span></span><br><span class="line">│  │  ├──index.ts</span><br><span class="line">│  │  └──...</span><br><span class="line">│  └──renderer    <span class="comment"># 渲染器 with vue, react, etc.</span></span><br><span class="line">│     ├──src</span><br><span class="line">│     ├──index.html</span><br><span class="line">│     └──...</span><br><span class="line">├──electron.vite.config.ts</span><br><span class="line">├──package.json</span><br><span class="line">└──...</span><br></pre></td></tr></table></figure><h4 id="2-main-index-ts-代码解释"><a href="#2-main-index-ts-代码解释" class="headerlink" title="2.main&#x2F;index.ts 代码解释"></a>2.main&#x2F;index.ts 代码解释</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; electronApp, optimizer, is &#125; <span class="keyword">from</span> <span class="string">&#x27;@electron-toolkit/utils&#x27;</span></span><br><span class="line"><span class="keyword">import</span> icon <span class="keyword">from</span> <span class="string">&#x27;../../resources/icon.png?asset&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">createWindow</span>: <span class="title class_">Function</span> = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 创建浏览器窗口</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">900</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">670</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span>, <span class="comment">// 窗口初始化时隐藏</span></span><br><span class="line">    <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>, <span class="comment">// 自动隐藏菜单栏</span></span><br><span class="line">    ...(process.<span class="property">platform</span> === <span class="string">&#x27;linux&#x27;</span> ? &#123; icon &#125; : &#123;&#125;), <span class="comment">// 在Linux平台上设置窗口图标</span></span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: <span class="title function_">join</span>(__dirname, <span class="string">&#x27;../preload/index.js&#x27;</span>), <span class="comment">// 预加载脚本</span></span><br><span class="line">      <span class="attr">sandbox</span>: <span class="literal">false</span> <span class="comment">// 关闭沙箱</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当窗口准备显示时触发事件</span></span><br><span class="line">  mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;ready-to-show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mainWindow.<span class="title function_">show</span>() <span class="comment">// 显示窗口</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拦截新窗口请求并在外部浏览器中打开链接</span></span><br><span class="line">  <span class="comment">// 如果要使用多页面路由，请注释这段代码</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.setWindowOpenHandler((details) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   shell.openExternal(details.url) // 在默认浏览器中打开链接</span></span><br><span class="line">  <span class="comment">//   return &#123; action: &#x27;deny&#x27; &#125; // 阻止Electron创建新窗口</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为 renderer 提供热模块替换（HMR）功能</span></span><br><span class="line">  <span class="comment">// 根据是否处于开发环境加载远程URL或本地HTML文件</span></span><br><span class="line">  <span class="keyword">if</span> (is.<span class="property">dev</span> &amp;&amp; process.<span class="property">env</span>[<span class="string">&#x27;ELECTRON_RENDERER_URL&#x27;</span>]) &#123;</span><br><span class="line">    mainWindow.<span class="title function_">loadURL</span>(process.<span class="property">env</span>[<span class="string">&#x27;ELECTRON_RENDERER_URL&#x27;</span>]) <span class="comment">// 加载开发环境URL</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mainWindow.<span class="title function_">loadFile</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../renderer/index.html&#x27;</span>)) <span class="comment">// 加载本地HTML文件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当Electron初始化完成并准备好创建浏览器窗口时调用此方法</span></span><br><span class="line"><span class="comment">// 某些API只能在此事件发生后使用</span></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 为Windows平台设置应用用户模型ID</span></span><br><span class="line">  electronApp.<span class="title function_">setAppUserModelId</span>(<span class="string">&#x27;com.amane&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在开发环境下默认打开或关闭开发者工具，并在生产环境中忽略 CommandOrControl + R 快捷键</span></span><br><span class="line">  <span class="comment">// 参见 https://github.com/alex8088/electron-toolkit/tree/master/packages/utils</span></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;browser-window-created&#x27;</span>, <span class="function">(<span class="params">_, <span class="variable language_">window</span></span>) =&gt;</span> &#123;</span><br><span class="line">    optimizer.<span class="title function_">watchWindowShortcuts</span>(<span class="variable language_">window</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IPC（进程间通信）测试</span></span><br><span class="line">  ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;ping&#x27;</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pong&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createWindow</span>()</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在macOS系统中，当点击托盘图标且没有其他窗口打开时，常常重新创建一个窗口</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当所有窗口关闭时退出应用，macOS系统除外</span></span><br><span class="line"><span class="comment">// 在macOS中，应用和其菜单栏会保持活动状态，直到用户按 Cmd + Q 显式退出</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这个文件中可以包含应用主进程的其他代码</span></span><br><span class="line"><span class="comment">// 也可以将这些代码放到单独的文件中，再在这里引入</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-preload-index-ts-代码解释"><a href="#3-preload-index-ts-代码解释" class="headerlink" title="3.preload&#x2F;index.ts 代码解释"></a>3.preload&#x2F;index.ts 代码解释</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; contextBridge &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; electronAPI &#125; <span class="keyword">from</span> <span class="string">&#x27;@electron-toolkit/preload&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义渲染进程API</span></span><br><span class="line"><span class="keyword">const</span> api = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 `contextBridge` 将Electron API暴露给渲染进程</span></span><br><span class="line"><span class="comment">// 仅当上下文隔离启用时，否则将API添加到全局DOM窗口对象</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">contextIsolated</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 如果启用了上下文隔离，则通过contextBridge暴露API</span></span><br><span class="line">    contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;electron&#x27;</span>, electronAPI)</span><br><span class="line">    contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;api&#x27;</span>, api)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果未启用上下文隔离，直接将API添加到全局DOM窗口对象</span></span><br><span class="line">  <span class="comment">// @ts-ignore (在d.ts中定义)</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">electron</span> = electronAPI</span><br><span class="line">  <span class="comment">// @ts-ignore (在d.ts中定义)</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">api</span> = api</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、生产环境打包"><a href="#四、生产环境打包" class="headerlink" title="四、生产环境打包"></a>四、生产环境打包</h3><h4 id="1-打包指令"><a href="#1-打包指令" class="headerlink" title="1.打包指令"></a>1.打包指令</h4><p>​  构建好的项目打包默认不生成安装文件，需要手动指定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pnpm run build    # 打包不编译</span><br><span class="line">pnpm run build:win  # Windows </span><br><span class="line">pnpm run build:mac  # Mac </span><br><span class="line">pnpm run build:linux # Linux </span><br></pre></td></tr></table></figure><h4 id="2-配置文件-electron-builder-yml-代码解释"><a href="#2-配置文件-electron-builder-yml-代码解释" class="headerlink" title="2.配置文件 electron-builder.yml 代码解释"></a>2.配置文件 electron-builder.yml 代码解释</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包基础配置</span></span><br><span class="line"><span class="attr">appId:</span> <span class="string">com.amane.example</span>  <span class="comment"># 应用程序的 ID，通常为反向域名格式</span></span><br><span class="line"><span class="attr">productName:</span> <span class="string">electron-vite-test</span>   <span class="comment"># 产品名称，即构建后生成的文件的基础名称</span></span><br><span class="line"><span class="attr">directories:</span></span><br><span class="line">  <span class="attr">buildResources:</span> <span class="string">build</span> <span class="comment"># 构建资源的目录，例如图标、安装包等资源</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">dist</span>  <span class="comment"># 输出的目录，通常为 dist</span></span><br><span class="line"><span class="attr">files:</span>  <span class="comment"># 打包排除文件</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;!**/.vscode/*&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;!src/*&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;!electron.vite.config.&#123;js,ts,mjs,cjs&#125;&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;!&#123;.eslintignore,.eslintrc.cjs,.prettierignore,.prettierrc.yaml,dev-app-update.yml,CHANGELOG.md,README.md&#125;&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;!&#123;.env,.env.*,.npmrc,pnpm-lock.yaml&#125;&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;!&#123;tsconfig.json,tsconfig.node.json,tsconfig.web.json&#125;&#x27;</span></span><br><span class="line"><span class="attr">asarUnpack:</span> <span class="comment"># 指定不会被打包进 ASAR 文件的资源目录</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">resources/**</span></span><br><span class="line"><span class="comment"># extraResources: # 指定要包含在构建包中的其他资源，例如数据库、配置文件等</span></span><br><span class="line"><span class="comment">#   - from: &quot;extraResources/&quot;  # 来源目录</span></span><br><span class="line"><span class="comment">#     to: &quot;extraResources&quot;  # 打包后的目标目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows 平台的特定配置</span></span><br><span class="line"><span class="attr">win:</span></span><br><span class="line">  <span class="attr">target:</span> <span class="comment"># 目标打包格式，通常是 nsis（Nullsoft Scriptable Install System）</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nsis</span>  </span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;build/icon.ico&#x27;</span>  <span class="comment"># 应用图标</span></span><br><span class="line">  <span class="comment"># legalTrademarks: &quot;My Trademark&quot;  # 法律商标</span></span><br><span class="line">  <span class="comment"># verifyUpdateCodeSignature: false  # 禁用更新代码签名的验证</span></span><br><span class="line"><span class="attr">nsis:</span> <span class="comment"># NSIS 安装程序配置</span></span><br><span class="line">  <span class="attr">oneClick:</span> <span class="literal">false</span>  <span class="comment"># 禁用一键安装</span></span><br><span class="line">  <span class="attr">perMachine:</span> <span class="literal">true</span>  <span class="comment"># 允许为所有用户安装</span></span><br><span class="line">  <span class="attr">allowToChangeInstallationDirectory:</span> <span class="literal">true</span>  <span class="comment"># 允许用户更改安装目录</span></span><br><span class="line">  <span class="attr">createDesktopShortcut:</span> <span class="string">always</span>  <span class="comment"># 始终创建桌面快捷方式</span></span><br><span class="line">  <span class="attr">shortcutName:</span> <span class="string">&quot;$&#123;productName&#125;&quot;</span>  <span class="comment"># 快捷方式的名称</span></span><br><span class="line"><span class="comment"># signingHashAlgorithms: # Windows 代码签名的证书属性</span></span><br><span class="line"><span class="comment">#   - sha256</span></span><br><span class="line"><span class="comment">#   certificateFile: &#x27;path/to/your-certificate.pfx&#x27;  # 代码签名证书文件路径</span></span><br><span class="line"><span class="comment">#   certificatePassword: &#x27;your-password&#x27;  # 代码签名证书密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># macOS 平台的特定配置</span></span><br><span class="line"><span class="attr">mac:</span></span><br><span class="line">  <span class="attr">target:</span> <span class="comment"># 目标打包格式，通常是 dmg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dmg</span>  </span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;build/icon.icns&#x27;</span>  <span class="comment"># 应用图标</span></span><br><span class="line">  <span class="attr">category:</span> <span class="string">&quot;public.app-category.utilities&quot;</span>  <span class="comment"># 应用类别</span></span><br><span class="line">  <span class="attr">hardenedRuntime:</span> <span class="literal">true</span>  <span class="comment"># 启用硬化运行时</span></span><br><span class="line">  <span class="attr">entitlements:</span> <span class="string">&quot;build/entitlements.mac.plist&quot;</span>  <span class="comment"># 权限配置文件</span></span><br><span class="line">  <span class="attr">entitlementsInherit:</span> <span class="string">&quot;build/entitlements.mac.inherit.plist&quot;</span>  <span class="comment"># 继承权限配置文件</span></span><br><span class="line">  <span class="attr">gatekeeperAssess:</span> <span class="literal">false</span>  <span class="comment"># 禁用门卫评估</span></span><br><span class="line"><span class="attr">dmg:</span></span><br><span class="line">  <span class="comment"># DMG 安装包配置</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">&quot;build/background.png&quot;</span>  <span class="comment"># DMG 安装包背景图片</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&quot;build/icon.icns&quot;</span>  <span class="comment"># DMG 安装包图标</span></span><br><span class="line">  <span class="attr">iconSize:</span> <span class="number">100</span>  <span class="comment"># 图标大小</span></span><br><span class="line">  <span class="attr">artifactName:</span> <span class="string">&quot;$&#123;productName&#125;-v$&#123;version&#125;.$&#123;ext&#125;&quot;</span>  <span class="comment"># 生成的 DMG 文件名称格式</span></span><br><span class="line"></span><br><span class="line"><span class="attr">linux:</span></span><br><span class="line">  <span class="comment"># Linux 平台的特定配置</span></span><br><span class="line">  <span class="attr">target:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">AppImage</span>  <span class="comment"># 目标打包格式，通常是 AppImage</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">snap</span>  <span class="comment"># 音关闭相关格式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deb</span>  <span class="comment"># 目标打包格式，通常是 deb</span></span><br><span class="line">  <span class="attr">maintainer:</span> <span class="string">$&#123;author&#125;</span>  <span class="comment"># 维护者信息</span></span><br><span class="line">  <span class="attr">vendor:</span> <span class="string">&quot;Your Company&quot;</span>  <span class="comment"># 供应商信息</span></span><br><span class="line">  <span class="attr">synopsis:</span> <span class="string">&quot;一个简短的应用描述&quot;</span>  <span class="comment"># 应用简述</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;一个详细的应用描述&quot;</span>  <span class="comment"># 应用详细描述</span></span><br><span class="line">  <span class="attr">category:</span> <span class="string">&quot;Utility&quot;</span>  <span class="comment"># 应用类别</span></span><br><span class="line"><span class="attr">appImage:</span> <span class="comment"># AppImage 安装包的相关配置</span></span><br><span class="line">  <span class="attr">artifactName:</span> <span class="string">$&#123;name&#125;-$&#123;version&#125;.$&#123;ext&#125;</span>  <span class="comment"># 生成的 AppImage 文件的名称格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其它配置</span></span><br><span class="line"><span class="attr">publish:</span>  <span class="comment"># 发布配置，用于自动更新等</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">generic</span>  <span class="comment"># 使用通用发布方式</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">&quot;https://example.com/updates/&quot;</span>  <span class="comment"># 自动更新的 URL</span></span><br><span class="line"><span class="attr">npmRebuild:</span> <span class="literal">false</span> <span class="comment"># 是否在打包前重新构建本地 Node.js 模块</span></span><br><span class="line"><span class="comment"># releaseNotes: &quot;Release notes for version $&#123;version&#125;&quot;  # Electron Builder 的 &#x27;releaseNotes&#x27;，用于在更新期间提供变更日志</span></span><br><span class="line"><span class="comment"># npmArgs: [&quot;--runtime=electron&quot;, &quot;--target=2.0.4&quot;, &quot;--disturl=https://atom.io/download/atom-shell&quot;]  # 启用 Yarn 处理依赖关系</span></span><br><span class="line"><span class="comment"># sourceMaps: true  # 启用 source-map，用于更好的调试</span></span><br><span class="line"><span class="comment"># prune: true # 在打包过程中是否删除所有 devDependencies</span></span><br></pre></td></tr></table></figure><h3 id="五、备注"><a href="#五、备注" class="headerlink" title="五、备注"></a>五、备注</h3><p>该项目没有装配大多数常见依赖（如 router、pinia 等），需手动添加。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> Electron </tag>
            
            <tag> Vite </tag>
            
            <tag> Tpyescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DPlayer + vue3 使用</title>
      <link href="/2024/05/24/DPlayer-vue3%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/05/24/DPlayer-vue3%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="DVideo-vue3-使用"><a href="#DVideo-vue3-使用" class="headerlink" title="DVideo + vue3 使用"></a>DVideo + vue3 使用</h2><h3 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h3><p><a href="https://dplayer.diygod.dev/zh/guide.html#special-thanks">https://dplayer.diygod.dev/zh/guide.html#special-thanks</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm install dplayer --save</span><br><span class="line">pnpm install @types/dplayer --save-dev</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted, onBeforeUnmount &#125; from &#x27;vue&#x27;;</span><br><span class="line">import DPlayer from &#x27;dplayer&#x27;;</span><br><span class="line">import type &#123;</span><br><span class="line">  DPlayerOptions,</span><br><span class="line">  DPlayerVideoOptions,</span><br><span class="line">  DPlayerDanmakuOptions,</span><br><span class="line">  DPlayerSubtitleOptions</span><br><span class="line">&#125; from &#x27;@/interfaces/DPlayerOptions.ts&#x27;;</span><br><span class="line"></span><br><span class="line">const prop = defineProps&lt;&#123;</span><br><span class="line">  url: string;</span><br><span class="line">  pic?: string;</span><br><span class="line">  subtitle?: string;</span><br><span class="line">  autoplay: boolean;</span><br><span class="line">  danmakuId?: string;</span><br><span class="line">  danmakuApi?: string;</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 视频配置属性</span><br><span class="line"> */</span><br><span class="line">const videoOptions: DPlayerVideoOptions = &#123;</span><br><span class="line">  url: prop.url,</span><br><span class="line">  pic: prop.pic ? prop.pic : undefined,</span><br><span class="line">  thumbnails: prop.pic ? prop.pic : undefined,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 弹幕配置属性</span><br><span class="line"> */</span><br><span class="line">const danmakuOptions: DPlayerDanmakuOptions = &#123;</span><br><span class="line">  id: prop.danmakuId ? prop.danmakuId : &#x27;no danmaku&#x27;,</span><br><span class="line">  api: prop.danmakuApi ? prop.danmakuApi : &#x27;no danmaku&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 字幕配置属性</span><br><span class="line"> */</span><br><span class="line">const subtitleOptions: DPlayerSubtitleOptions = &#123;</span><br><span class="line">  url: prop.subtitle ? prop.subtitle : &#x27;no subtitle&#x27;,</span><br><span class="line">  type: &#x27;webvtt&#x27;,</span><br><span class="line">  bottom:&#x27;20%&#x27;,</span><br><span class="line">  fontSize: &#x27;32px&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line"> * DPlayer 配置属性</span><br><span class="line"> */</span><br><span class="line">const playerOptions: DPlayerOptions = &#123;</span><br><span class="line">  container: null,</span><br><span class="line">  autoplay: prop.autoplay,</span><br><span class="line">  video: videoOptions,</span><br><span class="line">  danmaku: prop.danmakuId ? danmakuOptions : undefined,</span><br><span class="line">  subtitle: prop.subtitle ? subtitleOptions : undefined</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const dplayerContainer = ref(null);                     // 引用视频播放器的容器元素</span><br><span class="line">const dplayerInstance = ref&lt;DPlayer | null&gt;(null);      // DPlayer 实例</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  if (dplayerContainer.value) &#123;                         // 检查 dplayerContainer 是否已绑定到实际的 DOM 元素上</span><br><span class="line">    playerOptions.container = dplayerContainer.value;   // 将容器元素绑定到 DPlayer 配置中</span><br><span class="line">    dplayerInstance.value = new DPlayer(playerOptions); // 创建 DPlayer 实例</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">  // 在组件销毁前销毁 DPlayer 实例，避免内存泄漏</span><br><span class="line">  if (dplayerInstance.value) &#123;</span><br><span class="line">    dplayerInstance.value.destroy();                    // 销毁 DPlayer 实例</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dplayer-container&quot; ref=&quot;dplayerContainer&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.dplayer-container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 500px;</span><br><span class="line">  /* Adjust based on your needs */</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">SubTitleType</span> &#125; <span class="keyword">from</span> <span class="string">&quot;dplayer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 视频属性 </span></span><br><span class="line"><span class="comment"> * */</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DPlayerVideoOptions</span> &#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="built_in">string</span>;          <span class="comment">// 视频文件的地址</span></span><br><span class="line">  <span class="attr">pic</span>?: <span class="built_in">string</span>;         <span class="comment">// 视频封面图片地址（可选）</span></span><br><span class="line">  <span class="attr">thumbnails</span>?: <span class="built_in">string</span>;  <span class="comment">// 视频缩略图地址（可选）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 弹幕自定义 API 后端接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DanmakuAPIBackend</span> &#123;</span><br><span class="line">  <span class="attr">read</span>: <span class="function">(<span class="params"><span class="attr">endpoint</span>: &#123; url: <span class="built_in">string</span> &#125;, <span class="attr">callback</span>: (data: <span class="built_in">any</span>) =&gt; <span class="built_in">void</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">send</span>: <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="attr">endpoint</span>: &#123; url: <span class="built_in">string</span> &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="attr">danmakuData</span>: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="attr">callback</span>: () =&gt; <span class="built_in">void</span></span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 弹幕属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DPlayerDanmakuOptions</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;                     <span class="comment">// 弹幕池 ID</span></span><br><span class="line">  <span class="attr">api</span>: <span class="built_in">string</span>;                    <span class="comment">// 弹幕数据的接口 URL</span></span><br><span class="line">  <span class="attr">token</span>?: <span class="built_in">string</span>;                 <span class="comment">// 用于验证请求的令牌（可选）</span></span><br><span class="line">  <span class="attr">maximum</span>?: <span class="built_in">string</span>;               <span class="comment">// 最大同时显示的弹幕数量（可选）</span></span><br><span class="line">  <span class="attr">unlimited</span>?: <span class="built_in">boolean</span>;            <span class="comment">// 是否不限数量地显示弹幕（可选）</span></span><br><span class="line">  <span class="attr">addition</span>?: <span class="built_in">string</span>[];            <span class="comment">// 额外的弹幕池 URL 数组（可选）</span></span><br><span class="line">  <span class="attr">user</span>?: <span class="built_in">string</span>;                  <span class="comment">// 当前用户的标志（可选）</span></span><br><span class="line">  <span class="attr">bottom</span>?: <span class="built_in">string</span>;                <span class="comment">// 弹幕在视频底部的距离（可选）</span></span><br><span class="line">  <span class="attr">fontSize</span>?: <span class="built_in">string</span>;              <span class="comment">// 弹幕字体大小（可选）</span></span><br><span class="line">  <span class="attr">speed</span>?: <span class="built_in">number</span>;                 <span class="comment">// 弹幕滚动速度（可选）</span></span><br><span class="line">  <span class="attr">opacity</span>?: <span class="built_in">number</span>;               <span class="comment">// 弹幕透明度，0 到 1 之间（可选）</span></span><br><span class="line">  <span class="attr">callback</span>?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;          <span class="comment">// 弹幕加载成功后的回调函数（可选）</span></span><br><span class="line">  <span class="attr">apiBackend</span>?: <span class="title class_">DanmakuAPIBackend</span>; <span class="comment">// 自定义 API 后端方式（可选）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字幕属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DPlayerSubtitleOptions</span> &#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="built_in">string</span>;              <span class="comment">// 字幕文件的 URL</span></span><br><span class="line">  <span class="attr">type</span>?: <span class="title class_">SubTitleType</span>;      <span class="comment">// 字幕文件的类型，默认 &#x27;webvtt&#x27;</span></span><br><span class="line">  <span class="attr">fontSize</span>?: <span class="built_in">string</span>;        <span class="comment">// 字幕字体大小，默认 &#x27;16px&#x27;</span></span><br><span class="line">  <span class="attr">bottom</span>?: <span class="built_in">string</span>;          <span class="comment">// 字幕距视频底部的距离，默认 &#x27;10%&#x27;</span></span><br><span class="line">  <span class="attr">color</span>?: <span class="built_in">string</span>;           <span class="comment">// 字幕颜色，默认 &#x27;white&#x27;</span></span><br><span class="line">  <span class="attr">backgroundColor</span>?: <span class="built_in">string</span>; <span class="comment">// 字幕背景颜色，默认 &#x27;transparent&#x27;</span></span><br><span class="line">  <span class="attr">offset</span>?: <span class="built_in">number</span>;          <span class="comment">// 字幕的时间偏移，单位：秒，默认 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DPlayer 播放器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DPlayerOptions</span> &#123;</span><br><span class="line">  <span class="attr">container</span>: <span class="title class_">HTMLElement</span> | <span class="literal">null</span>;      <span class="comment">// 播放器容器</span></span><br><span class="line">  <span class="attr">autoplay</span>?: <span class="built_in">boolean</span>;                 <span class="comment">// 是否自动播放（可选）</span></span><br><span class="line">  <span class="attr">video</span>: <span class="title class_">DPlayerVideoOptions</span>;         <span class="comment">// 视频属性</span></span><br><span class="line">  <span class="attr">danmaku</span>?: <span class="title class_">DPlayerDanmakuOptions</span>;    <span class="comment">// 弹幕属性（可选）</span></span><br><span class="line">  <span class="attr">subtitle</span>?: <span class="title class_">DPlayerSubtitleOptions</span>;  <span class="comment">// 字幕属性（可选）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mkv格式视频提取字幕文件（python-webvtt）"><a href="#mkv格式视频提取字幕文件（python-webvtt）" class="headerlink" title="mkv格式视频提取字幕文件（python + webvtt）"></a>mkv格式视频提取字幕文件（python + webvtt）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_subtitles_from_mkv</span>(<span class="params">source_folder: <span class="built_in">str</span>, target_folder: <span class="built_in">str</span></span>):</span><br><span class="line">    Path(target_folder).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)  <span class="comment"># 创建目标文件夹（如果不存在）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历源文件夹中的所有 .mkv 文件</span></span><br><span class="line">    mkv_files = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(source_folder) <span class="keyword">if</span> f.endswith(<span class="string">&#x27;.mkv&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> mkv_file <span class="keyword">in</span> mkv_files:</span><br><span class="line">        source_path = os.path.join(source_folder, mkv_file)</span><br><span class="line">        base_name = os.path.splitext(mkv_file)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 枚举字幕流，找到所有的字幕流并提取</span></span><br><span class="line">        command = [<span class="string">&#x27;ffmpeg&#x27;</span>, <span class="string">&#x27;-i&#x27;</span>, source_path]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=<span class="literal">True</span>,</span><br><span class="line">                                    encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            stderr_output = result.stderr</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError <span class="keyword">as</span> e:</span><br><span class="line">            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">            stderr_output = result.stderr.decode(<span class="string">&#x27;gbk&#x27;</span>)  <span class="comment"># 尝试使用gbk编码解码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析字幕流信息</span></span><br><span class="line">        subtitle_streams = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> stderr_output.split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Subtitle:&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">                parts = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                idx = parts[<span class="number">0</span>].strip().split(<span class="string">&#x27;Stream #&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]  <span class="comment"># 提取流编号</span></span><br><span class="line">                subtitle_streams.append(idx)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> subtitle_streams:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;No subtitles found in <span class="subst">&#123;mkv_file&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取字幕流到目标文件夹，转换为 WebVTT (.vtt) 格式</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> subtitle_streams:</span><br><span class="line">            target_path = os.path.join(target_folder, <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>_sub<span class="subst">&#123;idx&#125;</span>.vtt&quot;</span>)</span><br><span class="line">            ffmpeg_command = [</span><br><span class="line">                <span class="string">&#x27;ffmpeg&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;-i&#x27;</span>, source_path,  <span class="comment"># 输入文件路径</span></span><br><span class="line">                <span class="string">&#x27;-map&#x27;</span>, <span class="string">f&#x27;0:s:<span class="subst">&#123;idx&#125;</span>&#x27;</span>,  <span class="comment"># 映射字幕流</span></span><br><span class="line">                <span class="string">&#x27;-f&#x27;</span>, <span class="string">&#x27;webvtt&#x27;</span>,  <span class="comment"># 转换为 WebVTT 格式</span></span><br><span class="line">                target_path  <span class="comment"># 输出文件路径</span></span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Extracting subtitles from &#x27;<span class="subst">&#123;mkv_file&#125;</span>&#x27; to &#x27;<span class="subst">&#123;target_path&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                subprocess.run(ffmpeg_command, check=<span class="literal">True</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Extracted subtitles to &#x27;<span class="subst">&#123;target_path&#125;</span>&#x27; successfully.&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Failed to extract subtitles from &#x27;<span class="subst">&#123;mkv_file&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    source_folder = <span class="string">&#x27;./input&#x27;</span>  <span class="comment"># 输入文件夹路径</span></span><br><span class="line">    target_folder = <span class="string">&#x27;./output&#x27;</span>  <span class="comment"># 输出文件夹路径</span></span><br><span class="line"></span><br><span class="line">    extract_subtitles_from_mkv(source_folder, target_folder)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> DPlayer </tag>
            
            <tag> 前端 </tag>
            
            <tag> 视频播放 </tag>
            
            <tag> Python </tag>
            
            <tag> webvtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有序表的查找</title>
      <link href="/2023/09/19/%E6%9C%89%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>/2023/09/19/%E6%9C%89%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="有序表的查找"><a href="#有序表的查找" class="headerlink" title="有序表的查找"></a>有序表的查找</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>有序表为各元素的key值依次排序组成的查找表<br>如：学号，座位号等</p><hr><h3 id="1-折半查找"><a href="#1-折半查找" class="headerlink" title="1. 折半查找"></a>1. 折半查找</h3><p>先确定待查记录的范围，然后逐步缩小范围(递归操作实现)，直到找到&#x2F;找不到为止，每次缩小范围取中间值。<br>递归调用中，各部分所填参数为：</p><table><thead><tr><th></th><th>left(real)</th><th>right(not real)</th><th>right(real)</th></tr></thead><tbody><tr><td>left_part</td><td>left</td><td>mid</td><td>mid - 1</td></tr><tr><td>right_part</td><td>mid + 1</td><td>right</td><td>right - 1</td></tr></tbody></table><p>平均查找长度：<br>$$<br>ASL&#x3D;log(n + 1) - 1<br>$$</p><hr><h3 id="2-斐波那契查找"><a href="#2-斐波那契查找" class="headerlink" title="2. 斐波那契查找"></a>2. 斐波那契查找</h3><p>利用斐波那契数列的性质，以相邻两个斐波那契数为边界来确定key的范围。<br>一般情况下，优于折半查找，但在最坏情况下劣于折半查找。</p><p>平均查找长度：<br>$$<br>ASL&#x3D;(n + 1)log(n + 1) - 1&#x2F;n<br>$$</p><hr><h3 id="3-索引表查找"><a href="#3-索引表查找" class="headerlink" title="3. 索引表查找"></a>3. 索引表查找</h3><p>将长度为n的表平分数个大小相等的区域，每个区域有s个元素，且每个区域按照顺序划出范围。查找时先寻找范围，后进一步查找。<br>效率不及折半查找。</p><p>平均查找长度(约等)：<br>$$<br>ASL&#x3D;log((n&#x2F;s) + 1) + s&#x2F;2<br>$$</p><hr><h3 id="4-二叉排序树"><a href="#4-二叉排序树" class="headerlink" title="4. 二叉排序树"></a>4. 二叉排序树</h3><p>一种二叉树，所有节点的左节点均小于该节点，右节点均大于该节点，形成了一种微妙的范围表示法。<br>该树特点在于动态查找有序表，可随查找过程准确定位添加新节点。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 查找算法 </tag>
            
            <tag> 有序表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树及 Java 实现</title>
      <link href="/2023/09/18/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%8F%8A-Java-%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/09/18/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%8F%8A-Java-%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉搜索树及-Java-实现"><a href="#二叉搜索树及-Java-实现" class="headerlink" title="二叉搜索树及 Java 实现"></a>二叉搜索树及 Java 实现</h2><hr><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>由一棵二叉树构成，满足：<br>$$<br>left.key&lt;key&lt;&#x3D;right.key<br>$$<br>进一步有：<br>$$<br>key&lt;&#x3D;right.key&lt;parent.key<br>$$<br>大部分二叉搜索树的最坏运行时间与树的高度成正比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成员变量(一般情况下)</span></span><br><span class="line">Tree parent;</span><br><span class="line">Tree left;</span><br><span class="line">Tree right;</span><br><span class="line"><span class="keyword">var</span> key;</span><br></pre></td></tr></table></figure><hr><h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><p>​ <strong>1.中序遍历：</strong></p><p>​  通过递归方法，先找出左节点，再找出当前节点，最后是右节点。<br>​  定理：若树节点为<code>n</code>，则调用该遍历方法需要<code>O(n)</code>的时间。</p><p>​ <strong>2.先序遍历</strong></p><p>​  先当前节点，后左节点，最后右节点。</p><p>​ <strong>3.后序遍历</strong></p><p>​  先左节点，后右节点，最后当前节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">()</span> &#123;</span><br><span class="line">    inorder(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) inorder(node.left);</span><br><span class="line">    System.out.println(node.key);</span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) inorder(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">()</span> &#123;</span><br><span class="line">    preorder(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preorder</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    System.out.println(node.key);</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) preorder(node.left);</span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) preorder(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postorder</span><span class="params">()</span> &#123;</span><br><span class="line">    postorder(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postorder</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    System.out.println(node.key);</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) postorder(node.left);</span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) postorder(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>给定一关键字key，返回第一个找到的含该关键字的树节点，没有则返回<code>null</code>。</p><p>运行时间为<code>O(h)</code>，<code>h</code>为树的高度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找具体值对应的树（递归调用法）</span></span><br><span class="line"><span class="keyword">public</span> Tree <span class="title function_">search</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="built_in">this</span>.key) <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; <span class="built_in">this</span>.key) <span class="keyword">return</span> left != <span class="literal">null</span> ? left.search(key) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> right != <span class="literal">null</span> ? right.search(key) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找具体值对应的树（循环法）注意容易因混淆而产生幂等循环体，应设临时变量</span></span><br><span class="line"><span class="keyword">public</span> Tree <span class="title function_">iterativeSearch</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">Tree</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tree</span>();</span><br><span class="line">    root = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">null</span> &amp;&amp; root.key != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; <span class="built_in">this</span>.key) root = root.left != <span class="literal">null</span> ? root.left : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">else</span> root = root.right != <span class="literal">null</span> ? root.right : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最大值和最小值：仅需查找左&#x2F;右节点到头即可，运行时间为<code>O(h)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找以node为根节点的最小值（递归调用法）</span></span><br><span class="line"><span class="keyword">public</span> Tree <span class="title function_">minimum</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> minimum(node.left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找以node为根节点的最小值（循环法）</span></span><br><span class="line"><span class="keyword">public</span> Tree <span class="title function_">iterativeMinimum</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (node.left != <span class="literal">null</span>) node = node.left;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找以node为根节点的最大值（递归调用法）</span></span><br><span class="line"><span class="keyword">public</span> Tree <span class="title function_">maximum</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.right == <span class="literal">null</span>) <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> maximum(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找以node为根节点的最大值（循环法）</span></span><br><span class="line"><span class="keyword">public</span> Tree <span class="title function_">iterativeMaximum</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (node.right != <span class="literal">null</span>) node = node.right;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后继和前驱：关键字key的最小大于值和最大小于值（<code>key</code>均不相等的情况下），运行时间为<code>O(h)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前驱</span></span><br><span class="line"><span class="keyword">public</span> Tree <span class="title function_">predecessor</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) <span class="keyword">return</span> maximum(node.left);</span><br><span class="line">    <span class="type">Tree</span> <span class="variable">node_p</span> <span class="operator">=</span> node.parent;</span><br><span class="line">    <span class="keyword">while</span> (node_p != <span class="literal">null</span> &amp;&amp; node == node_p.left) &#123;</span><br><span class="line">        node = node_p;</span><br><span class="line">        node_p = node_p.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node_p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后继</span></span><br><span class="line"><span class="keyword">public</span> Tree <span class="title function_">successor</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) <span class="keyword">return</span> maximum(node.right);</span><br><span class="line">    <span class="type">Tree</span> <span class="variable">node_p</span> <span class="operator">=</span> node.parent;</span><br><span class="line">    <span class="keyword">while</span> (node_p != <span class="literal">null</span> &amp;&amp; node == node_p.right) &#123;</span><br><span class="line">        node = node_p;</span><br><span class="line">        node_p = node_p.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node_p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>插入和删除会引发树结构的动态集合的变化。插入相对简单，但删除较为复杂。</p><p>插入：从根节点向下遍历到指定位置，实际上为新叶子节点的添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加（插入）递归调用法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; <span class="built_in">this</span>.key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span>) &#123;</span><br><span class="line">            left = <span class="keyword">new</span> <span class="title class_">Tree</span>();</span><br><span class="line">            left.key = key;</span><br><span class="line">            left.parent = <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> left.insert(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="literal">null</span>) &#123;</span><br><span class="line">            right = <span class="keyword">new</span> <span class="title class_">Tree</span>();</span><br><span class="line">            right.key = key;</span><br><span class="line">            right.parent = <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> right.insert(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加（插入）循环法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">iterativeInsert</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">Tree</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Tree</span> <span class="variable">x</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="literal">null</span>) &#123;</span><br><span class="line">        parent = x;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; x.key) x = x.left;</span><br><span class="line">        <span class="keyword">else</span> x = x.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; parent.key) &#123;</span><br><span class="line">        parent.left = <span class="keyword">new</span> <span class="title class_">Tree</span>();</span><br><span class="line">        parent.left.key = key;</span><br><span class="line">        parent.left.parent = parent;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.right = <span class="keyword">new</span> <span class="title class_">Tree</span>();</span><br><span class="line">        parent.right.key = key;</span><br><span class="line">        parent.right.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除：有三种情况，有一种较为棘手，设该节点为<code>z</code>。</p><blockquote><ol><li><code>z</code>节点没有子节点，则仅将对应父节点连接的子节点位置修改为<code>null</code>；</li><li><code>z</code>节点有一个子节点，则将该子节点与父节点相连;</li><li><code>z</code>节点有两个子节点，则应寻找其后继<code>y</code>,将<code>y</code>代替<code>z</code>，<code>z</code>的子节点和父节点改接到<code>y</code>上，并将原<code>y</code>的父节点连接的子节点位置修改为<code>null</code>。该情况较为棘手，还涉及<code>y</code>是否为<code>z</code>右子节点的情况。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Tree node)</span> &#123;</span><br><span class="line">    <span class="comment">//如果左孩子为null，则提升右孩子，包含了二者皆为null的情况</span></span><br><span class="line">    <span class="keyword">if</span> (node.left == <span class="literal">null</span>) transPlant(node, node.right, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//如果左孩子非null，右孩子为null，则提升左孩子</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="literal">null</span>) transPlant(node, node.left, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//如果二者非空,则寻找node的后继</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Tree</span> <span class="variable">next</span> <span class="operator">=</span> successor(node);</span><br><span class="line">        <span class="comment">//若next不是node的右孩子，则先将next的右孩子提升，再替换node</span></span><br><span class="line">        <span class="keyword">if</span> (next != node.right) &#123;</span><br><span class="line">            transPlant(next, next.right, <span class="literal">false</span>);</span><br><span class="line">            next.right = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若是，则直接替换</span></span><br><span class="line">        transPlant(node, next, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">transPlant</span><span class="params">(Tree node, Tree next, <span class="type">boolean</span> isLeft)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isLeft) next.right = node.right;</span><br><span class="line">    <span class="keyword">else</span> next.left = node.left;</span><br><span class="line">    <span class="keyword">if</span> (node == node.parent.left) node.parent.left = next;</span><br><span class="line">    <span class="keyword">else</span> node.parent.right = next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 查找算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 全局异常拦截配置</title>
      <link href="/2023/08/18/Spring%20Boot%20%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/08/18/Spring%20Boot%20%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Boot-全局异常拦截配置"><a href="#Spring-Boot-全局异常拦截配置" class="headerlink" title="Spring Boot 全局异常拦截配置"></a>Spring Boot 全局异常拦截配置</h2><p>对于一些报错，我们希望向前端返回一个错误提示结果，手动在报错后发送是很不方便的，我们可以定义一个【全局异常处理<code>handler</code>】来做这件事。</p><p>先来见见代码壳子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 对于要监听的异常报错，我们这么处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定拦截的异常类，要求继承自 RuntimeException</span></span><br><span class="line"><span class="meta">@ExceptionHandler(BadRequestException.class)</span></span><br><span class="line"><span class="comment">// 定义 http 响应状态码，必须是 HttpStatus 枚举，如示例为 400 </span></span><br><span class="line"><span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">badRequestException</span><span class="params">(BadRequestException e)</span> &#123;</span><br><span class="line"> <span class="comment">// 方法体内可以写该异常发生后要处理的事，比如自定义错误提示响应    </span></span><br><span class="line">    log.error(<span class="string">&quot;400 BadRequest: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> Result.error(<span class="number">400</span>, e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例中的响应体结构代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回结果类,服务端响应的数据最终都会封装成此对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Amane64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功回调</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  回调类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功回调数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.data = data;</span><br><span class="line">        result.msg = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        result.code = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功回调（无数据）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.data = <span class="literal">null</span>;</span><br><span class="line">        result.msg = <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        result.code = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 空回调类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 空回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        result.code = code;</span><br><span class="line">        result.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT令牌生成与解析</title>
      <link href="/2023/07/18/JWT%E4%BB%A4%E7%89%8C%E7%94%9F%E6%88%90%E4%B8%8E%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/07/18/JWT%E4%BB%A4%E7%89%8C%E7%94%9F%E6%88%90%E4%B8%8E%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="JWT令牌生成与解析"><a href="#JWT令牌生成与解析" class="headerlink" title="JWT令牌生成与解析"></a>JWT令牌生成与解析</h2><h3 id="完整工具类"><a href="#完整工具类" class="headerlink" title="完整工具类"></a>完整工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SignatureAlgorithm</span> <span class="variable">SIGNATURE_ALGORITHM</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET_KEY</span> <span class="operator">=</span> <span class="string">&quot;Ciallo_World&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有效时长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">JWT_TOKEN_VALIDITY</span> <span class="operator">=</span> <span class="number">3</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims 载荷</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 签名算法和密钥</span></span><br><span class="line">                .signWith(SIGNATURE_ALGORITHM, SECRET_KEY)</span><br><span class="line">                <span class="comment">// 载荷</span></span><br><span class="line">                .addClaims(claims)</span><br><span class="line">                <span class="comment">// 过期时间</span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + JWT_TOKEN_VALIDITY))</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 载荷</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(SECRET_KEY)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成令牌"><a href="#生成令牌" class="headerlink" title="生成令牌"></a>生成令牌</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成jwt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJWT</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">3</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">    claims.put(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    claims.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;amane&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">            <span class="comment">// 签名算法和密钥</span></span><br><span class="line">            .signWith(SignatureAlgorithm.HS256, <span class="string">&quot;Ciallo_World&quot;</span>)</span><br><span class="line">            <span class="comment">// 载荷</span></span><br><span class="line">            .addClaims(claims)</span><br><span class="line">            <span class="comment">// 过期时间</span></span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + time))</span><br><span class="line">            .compact();</span><br><span class="line"></span><br><span class="line">    log.info(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析令牌"><a href="#解析令牌" class="headerlink" title="解析令牌"></a>解析令牌</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析jwt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetJWT</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">            <span class="comment">// 密钥</span></span><br><span class="line">            .setSigningKey(<span class="string">&quot;Ciallo_World&quot;</span>)</span><br><span class="line">            <span class="comment">// token</span></span><br><span class="line">            .parseClaimsJws(<span class="string">&quot;令牌token&quot;</span>)</span><br><span class="line">            .getBody();</span><br><span class="line">    log.info(String.valueOf(claims));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring-Security </tag>
            
            <tag> JWT </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 本地前后端文件上传</title>
      <link href="/2023/07/16/java-%E6%9C%AC%E5%9C%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2023/07/16/java-%E6%9C%AC%E5%9C%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="java-本地前后端文件上传"><a href="#java-本地前后端文件上传" class="headerlink" title="java 本地前后端文件上传"></a>java 本地前后端文件上传</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="前置要求（三要素）"><a href="#前置要求（三要素）" class="headerlink" title="前置要求（三要素）"></a>前置要求（三要素）</h4><blockquote><ol><li>方式为必须为<code>post</code></li><li>表单编码类型必须为<code>multipart/form-data</code></li><li>文件表单项对应类型为<code>file</code></li></ol></blockquote><h4 id="后端原理"><a href="#后端原理" class="headerlink" title="后端原理"></a>后端原理</h4><p>后端文件的传输基于<code>MultipartFile</code>类，以下为部分常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getOriginalFilename</span><span class="params">()</span>; <span class="comment">// 获取原始文件名</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">transferTo</span><span class="params">(File dest)</span>;  <span class="comment">// 将接收到的文件转存到磁盘中</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">getSize</span><span class="params">()</span>;     <span class="comment">// 获取文件大小（b）</span></span><br><span class="line"><span class="type">byte</span>[] getBytes();    <span class="comment">// 获取文件内容的字节数组</span></span><br><span class="line">InputStream <span class="title function_">getInputStream</span><span class="params">()</span>; <span class="comment">// 获取接收文件的输入流</span></span><br></pre></td></tr></table></figure><h4 id="实操方法"><a href="#实操方法" class="headerlink" title="实操方法"></a>实操方法</h4><p><strong><code>controller</code>部分：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.success(service.upload(file));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>service</code>部分</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 检验数据合法性</span></span><br><span class="line">     <span class="type">var</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">     <span class="keyword">if</span> (filename == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;上传文件错误，获取不到文件名&quot;</span>);</span><br><span class="line">     <span class="comment">// 要防止文件被覆写，使用 uuid 保证文件命名的唯一性</span></span><br><span class="line">     <span class="comment">// 本地磁盘位置，要拼接“+ &quot;\\&quot; + uuid + OriginalFileName（如果有）”</span></span><br><span class="line">     <span class="type">var</span> <span class="variable">newFilename</span> <span class="operator">=</span> UUID.randomUUID() + (filename.contains(<span class="string">&quot;.&quot;</span>) ? filename.substring(file.getOriginalFilename().lastIndexOf(<span class="string">&quot;.&quot;</span>)) : <span class="string">&quot;&quot;</span>);</span><br><span class="line">     <span class="type">var</span> <span class="variable">descPath</span> <span class="operator">=</span> <span class="string">&quot;C:\\路径\\位置&quot;</span> + <span class="string">&quot;\\&quot;</span> + newFilename;</span><br><span class="line">     <span class="comment">// 新添加的文件 new 一个 File 对象即可</span></span><br><span class="line">     file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(descPath));</span><br><span class="line">     log.info(<span class="string">&quot;文件上传成功 &#123;&#125;&quot;</span>, newFilename);</span><br><span class="line">     <span class="keyword">return</span> descPath;</span><br><span class="line"> &#125; cache(IOException e) &#123;</span><br><span class="line">  <span class="comment">// 自定义错误方式……</span></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本地资源映射（项目路径外）"><a href="#本地资源映射（项目路径外）" class="headerlink" title="本地资源映射（项目路径外）"></a>本地资源映射（项目路径外）</h3><p>经此配置后，前端只需访问本地后端对应<code>url</code>即可访问文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Spring Boot的静态资源处理逻辑。</span></span><br><span class="line"><span class="comment">     * 本方法重写了WebMvcConfigurer接口的addResourceHandlers方法，用于指定应用程序如何处理静态资源请求。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry ResourceHandlerRegistry实例，用于注册资源处理器。</span></span><br><span class="line"><span class="comment">     *                 通过调用其addResourceHandler和addResourceLocations方法，可以指定哪些URL模式应该映射到哪里寻找静态资源。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;配置本地资源映射...&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义资源处理路径，即任何以/localRes/开头的URL请求都将被处理</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">resourceHandler</span> <span class="operator">=</span> <span class="string">&quot;/localRes/**&quot;</span>;</span><br><span class="line">        <span class="comment">// 定义资源的实际存储位置，这里使用了文件系统的绝对路径</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">resourceLocations</span> <span class="operator">=</span> <span class="string">&quot;file:C:/&#123;资源绝对路径&#125;/&quot;</span>;</span><br><span class="line">        <span class="comment">// 将资源处理路径和资源位置注册到Spring Boot的资源处理器中</span></span><br><span class="line">        registry.addResourceHandler(resourceHandler).addResourceLocations(resourceLocations);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> java </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> 静态资源映射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建 jwt 拦截与登录线程</title>
      <link href="/2023/06/24/%E5%88%9B%E5%BB%BA-jwt-%E6%8B%A6%E6%88%AA%E4%B8%8E%E7%99%BB%E5%BD%95%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/06/24/%E5%88%9B%E5%BB%BA-jwt-%E6%8B%A6%E6%88%AA%E4%B8%8E%E7%99%BB%E5%BD%95%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="创建-jwt-拦截与登录线程"><a href="#创建-jwt-拦截与登录线程" class="headerlink" title="创建 jwt 拦截与登录线程"></a>创建 jwt 拦截与登录线程</h2><h3 id="jwt属性配置"><a href="#jwt属性配置" class="headerlink" title="jwt属性配置"></a><code>jwt</code>属性配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;yml文件中的配置路径&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> ttl;</span><br><span class="line">    <span class="keyword">private</span> String tokenName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jwt拦截器"><a href="#jwt拦截器" class="headerlink" title="jwt拦截器"></a><code>jwt</code>拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt 拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtProperties jwtProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> HttpServletRequest request,        // 请求</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> HttpServletResponse response,      // 响应</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> Object handler)</span> &#123;                  <span class="comment">// 拦截的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtProperties.getTokenName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检验 token</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtils.parseJWT(token, jwtProperties.getKey());</span><br><span class="line">            <span class="comment">// 获取操作者 id</span></span><br><span class="line">            BaseContext.setCurrentId(Long.valueOf(claims.get(<span class="string">&quot;id&quot;</span>).toString()));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>(<span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>(<span class="string">&quot;token过期&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>(<span class="string">&quot;token算法不一致&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ForbiddenException</span>(<span class="string">&quot;签名错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServerErrorException</span>(<span class="string">&quot;未知 jwt 拦截错误 &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在WebMvcComfig中注册拦截器"><a href="#在WebMvcComfig中注册拦截器" class="headerlink" title="在WebMvcComfig中注册拦截器"></a>在<code>WebMvcComfig</code>中注册拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册自定义拦截器</span></span><br><span class="line"><span class="comment"> * 配置多端项目时，每一端都要进行相应拦截</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry InterceptorRegistry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;注册 jwt 拦截器...&quot;</span>);</span><br><span class="line">    registry.addInterceptor(jwtInterceptor)</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/admin/login&quot;</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建jwt登录线程"><a href="#构建jwt登录线程" class="headerlink" title="构建jwt登录线程"></a>构建<code>jwt</code>登录线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类, 用户保存和获取当前登录用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> JWT </tag>
            
            <tag> 加密验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数据库操作(JDBC)</title>
      <link href="/2023/04/13/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-JDBC/"/>
      <url>/2023/04/13/Java%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="Java数据库操作-JDBC"><a href="#Java数据库操作-JDBC" class="headerlink" title="Java数据库操作(JDBC)"></a>Java数据库操作(JDBC)</h2><blockquote><p>本文以Mysql为例</p></blockquote><h3 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a>配置maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将以上代码写入pom.xml内</p><hr><h3 id="编写登陆用-prooerties文件"><a href="#编写登陆用-prooerties文件" class="headerlink" title="编写登陆用.prooerties文件"></a>编写登陆用.prooerties文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/(base_name)?characterEncoding=UTF8&amp;autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string"></span></span><br><span class="line"><span class="attr">password</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><hr><h3 id="加载驱动程序"><a href="#加载驱动程序" class="headerlink" title="加载驱动程序"></a>加载驱动程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> Class.forName(JDBC_DRIVER);</span><br><span class="line">&#125;<span class="keyword">catch</span> Class.forName(JDBC_DRIVER);&#123;</span><br><span class="line">    se.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDBC_DRIVER为驱动程序的地址，如MySQL8.0为”com.mysql.cj.jdbc.Driver”。</p><hr><h3 id="DriverManager类"><a href="#DriverManager类" class="headerlink" title="DriverManager类"></a>DriverManager类</h3><blockquote><p>驱动管理类<br>加载完驱动程序后，该驱动程序的实例会注册到DriverManager类中。<br>该类无需定义对象，直接调用即可。<br>可通过getConnection()方法连接到相应的数据库。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接到数据库</span></span><br><span class="line"><span class="comment">// 返回Connection接口对象</span></span><br><span class="line"><span class="comment">// 输入的三个形参分别为数据库地址，用户名，密码</span></span><br><span class="line">getConnection(DB_URL, USER, PASS);</span><br></pre></td></tr></table></figure><p>数据库地址：<code>jdbc:mysql://localhost:3306/[数据库名]characterEncoding=UTF8&amp;autoReconnect=true&amp;useSSL=false</code></p><hr><h3 id="Connection接口"><a href="#Connection接口" class="headerlink" title="Connection接口"></a>Connection接口</h3><blockquote><p>链接数据库接口<br>可以理解为所连接的数据库的引用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建执行对象</span></span><br><span class="line"><span class="comment">// 返回Statement接口对象</span></span><br><span class="line">createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭并释放内存</span></span><br><span class="line">close();</span><br></pre></td></tr></table></figure><hr><h3 id="Statement接口"><a href="#Statement接口" class="headerlink" title="Statement接口"></a>Statement接口</h3><blockquote><p>执行接口，用于向数据库发送SQL语句。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行给定的SQL语句</span></span><br><span class="line"><span class="comment">// 返回ResultSet接口对象</span></span><br><span class="line"><span class="comment">// 形参sql为SQL语句，以字符串的形式写入</span></span><br><span class="line">executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭并释放内存</span></span><br><span class="line"><span class="comment">// close();</span></span><br></pre></td></tr></table></figure><hr><h3 id="PreparedStatement接口"><a href="#PreparedStatement接口" class="headerlink" title="PreparedStatement接口"></a>PreparedStatement接口</h3><blockquote><p>执行接口，用于动态执行SQL语句。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置该行指定列名的值</span></span><br><span class="line"><span class="comment">// index为行数，从0开始</span></span><br><span class="line">set&lt;<span class="keyword">var</span>&gt;(<span class="type">int</span> index,  <span class="keyword">var</span> value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回执行给定的SQL语句，返回改变的行数</span></span><br><span class="line">executeQuery();</span><br></pre></td></tr></table></figure><hr><h3 id="ResultSet接口"><a href="#ResultSet接口" class="headerlink" title="ResultSet接口"></a>ResultSet接口</h3><blockquote><p>暂时储存从数据库查询到的结果集，可看作一个临时表。<br>具有指向当前数据行的指针，可通过next()下移。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取该行指定列名的值，以var的形式返回</span></span><br><span class="line"><span class="comment">// 返回var类型（包括Object类对象）</span></span><br><span class="line">get&lt;<span class="keyword">var</span>&gt;(columnLabel);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针移动</span></span><br><span class="line">first();     <span class="comment">// 第一行</span></span><br><span class="line">last();      <span class="comment">// 最后一行</span></span><br><span class="line">next();      <span class="comment">// 下一行</span></span><br><span class="line">beforeFirst();    <span class="comment">// 第一行第一列</span></span><br><span class="line">afterLast();    <span class="comment">// 最后一行最后一列</span></span><br><span class="line">absolute(<span class="type">int</span> index);  <span class="comment">// 指定行号</span></span><br></pre></td></tr></table></figure><hr><h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><blockquote><p>读取.properties文件所存储的信息。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="comment">// FileReader为文件读取类对象，可以用new FileReader(url)代替</span></span><br><span class="line">load(FileReader);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件中信息</span></span><br><span class="line"><span class="comment">// tital为文件前的头缀</span></span><br><span class="line">getProperty(tital);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
            <tag> SQL </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
